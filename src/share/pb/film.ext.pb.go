// Code generated by protoc-gen-go. DO NOT EDIT.
// source: film.ext.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	film.ext.proto
	place.ext.proto

It has these top-level messages:
	HotPlayMoviesReq
	HotPlayMoviesRep
	HotMovie
	FilmAllMessage
	MovieDetailReq
	MovieDetailRep
	Release
	MovieCreditsWithTypesReq
	MovieCreditsWithTypesRep
	Type
	Persons
	ImageAllReq
	ImageAllRep
	Image
	HotCommentReq
	HotCommentRep
	CommentData
	CommentMini
	CommentPlus
	CommentRecord
	LocationMoviesReq
	LocationMoviesRep
	HotCitiesByCinemaReq
	HotCitiesByCinemaRep
	Place
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HotPlayMoviesReq struct {
	Location int64 `protobuf:"varint,1,opt,name=location" json:"location,omitempty"`
}

func (m *HotPlayMoviesReq) Reset()                    { *m = HotPlayMoviesReq{} }
func (m *HotPlayMoviesReq) String() string            { return proto.CompactTextString(m) }
func (*HotPlayMoviesReq) ProtoMessage()               {}
func (*HotPlayMoviesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HotPlayMoviesReq) GetLocation() int64 {
	if m != nil {
		return m.Location
	}
	return 0
}

type HotPlayMoviesRep struct {
	Test   int64       `protobuf:"varint,1,opt,name=test" json:"test,omitempty"`
	Movies []*HotMovie `protobuf:"bytes,2,rep,name=movies" json:"movies,omitempty"`
}

func (m *HotPlayMoviesRep) Reset()                    { *m = HotPlayMoviesRep{} }
func (m *HotPlayMoviesRep) String() string            { return proto.CompactTextString(m) }
func (*HotPlayMoviesRep) ProtoMessage()               {}
func (*HotPlayMoviesRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HotPlayMoviesRep) GetTest() int64 {
	if m != nil {
		return m.Test
	}
	return 0
}

func (m *HotPlayMoviesRep) GetMovies() []*HotMovie {
	if m != nil {
		return m.Movies
	}
	return nil
}

type HotMovie struct {
	ActorName     []string `protobuf:"bytes,1,rep,name=actorName" json:"actorName,omitempty"`
	CommonSpecial string   `protobuf:"bytes,2,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
	DirectorName  string   `protobuf:"bytes,3,opt,name=directorName" json:"directorName,omitempty"`
	Img           string   `protobuf:"bytes,4,opt,name=img" json:"img,omitempty"`
	Is3D          int64    `protobuf:"varint,5,opt,name=is3D" json:"is3D,omitempty"`
	IsDMAX        int64    `protobuf:"varint,6,opt,name=isDMAX" json:"isDMAX,omitempty"`
	IsFilter      int64    `protobuf:"varint,7,opt,name=isFilter" json:"isFilter,omitempty"`
	IsHot         int64    `protobuf:"varint,8,opt,name=isHot" json:"isHot,omitempty"`
	IsIMAX        int64    `protobuf:"varint,9,opt,name=isIMAX" json:"isIMAX,omitempty"`
	IsIMAX3D      int64    `protobuf:"varint,10,opt,name=isIMAX3D" json:"isIMAX3D,omitempty"`
	IsNew         int64    `protobuf:"varint,11,opt,name=isNew" json:"isNew,omitempty"`
	Length        int64    `protobuf:"varint,12,opt,name=length" json:"length,omitempty"`
	MovieId       int64    `protobuf:"varint,13,opt,name=movieId" json:"movieId,omitempty"`
	RDay          int64    `protobuf:"varint,14,opt,name=rDay" json:"rDay,omitempty"`
	RMonth        int64    `protobuf:"varint,15,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear         int64    `protobuf:"varint,16,opt,name=rYear" json:"rYear,omitempty"`
	RatingFinal   float32  `protobuf:"fixed32,17,opt,name=ratingFinal" json:"ratingFinal,omitempty"`
	T             string   `protobuf:"bytes,18,opt,name=t" json:"t,omitempty"`
	TitleCn       string   `protobuf:"bytes,19,opt,name=titleCn" json:"titleCn,omitempty"`
	TitleEn       string   `protobuf:"bytes,20,opt,name=titleEn" json:"titleEn,omitempty"`
	Type          string   `protobuf:"bytes,21,opt,name=type" json:"type,omitempty"`
	WantedCount   int64    `protobuf:"varint,22,opt,name=wantedCount" json:"wantedCount,omitempty"`
}

func (m *HotMovie) Reset()                    { *m = HotMovie{} }
func (m *HotMovie) String() string            { return proto.CompactTextString(m) }
func (*HotMovie) ProtoMessage()               {}
func (*HotMovie) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HotMovie) GetActorName() []string {
	if m != nil {
		return m.ActorName
	}
	return nil
}

func (m *HotMovie) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func (m *HotMovie) GetDirectorName() string {
	if m != nil {
		return m.DirectorName
	}
	return ""
}

func (m *HotMovie) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *HotMovie) GetIs3D() int64 {
	if m != nil {
		return m.Is3D
	}
	return 0
}

func (m *HotMovie) GetIsDMAX() int64 {
	if m != nil {
		return m.IsDMAX
	}
	return 0
}

func (m *HotMovie) GetIsFilter() int64 {
	if m != nil {
		return m.IsFilter
	}
	return 0
}

func (m *HotMovie) GetIsHot() int64 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *HotMovie) GetIsIMAX() int64 {
	if m != nil {
		return m.IsIMAX
	}
	return 0
}

func (m *HotMovie) GetIsIMAX3D() int64 {
	if m != nil {
		return m.IsIMAX3D
	}
	return 0
}

func (m *HotMovie) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *HotMovie) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *HotMovie) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

func (m *HotMovie) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *HotMovie) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *HotMovie) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *HotMovie) GetRatingFinal() float32 {
	if m != nil {
		return m.RatingFinal
	}
	return 0
}

func (m *HotMovie) GetT() string {
	if m != nil {
		return m.T
	}
	return ""
}

func (m *HotMovie) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

func (m *HotMovie) GetTitleEn() string {
	if m != nil {
		return m.TitleEn
	}
	return ""
}

func (m *HotMovie) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HotMovie) GetWantedCount() int64 {
	if m != nil {
		return m.WantedCount
	}
	return 0
}

type FilmAllMessage struct {
	Logo                 string  `protobuf:"bytes,1,opt,name=logo" json:"logo,omitempty"`
	FilmLong             int64   `protobuf:"varint,2,opt,name=filmLong" json:"filmLong,omitempty"`
	IsSelectSeat         int64   `protobuf:"varint,3,opt,name=isSelectSeat" json:"isSelectSeat,omitempty"`
	FilmPrice            float32 `protobuf:"fixed32,4,opt,name=filmPrice" json:"filmPrice,omitempty"`
	FilmScreenwriter     string  `protobuf:"bytes,5,opt,name=filmScreenwriter" json:"filmScreenwriter,omitempty"`
	CommentNum           int64   `protobuf:"varint,6,opt,name=commentNum" json:"commentNum,omitempty"`
	FilmName             string  `protobuf:"bytes,7,opt,name=filmName" json:"filmName,omitempty"`
	IsSupportInlineWatch int64   `protobuf:"varint,8,opt,name=isSupportInlineWatch" json:"isSupportInlineWatch,omitempty"`
	CreateAt             string  `protobuf:"bytes,9,opt,name=createAt" json:"createAt,omitempty"`
	BigType              int64   `protobuf:"varint,10,opt,name=bigType" json:"bigType,omitempty"`
	FilmDrama            string  `protobuf:"bytes,11,opt,name=filmDrama" json:"filmDrama,omitempty"`
	UserAccessTimes      int64   `protobuf:"varint,12,opt,name=userAccessTimes" json:"userAccessTimes,omitempty"`
	FilmBoxoffice        float32 `protobuf:"fixed32,13,opt,name=filmBoxoffice" json:"filmBoxoffice,omitempty"`
	FilmDirector         string  `protobuf:"bytes,14,opt,name=filmDirector" json:"filmDirector,omitempty"`
	UserLikeWatchTimes   int64   `protobuf:"varint,15,opt,name=userLikeWatchTimes" json:"userLikeWatchTimes,omitempty"`
	UserCommentTimes     int64   `protobuf:"varint,16,opt,name=userCommentTimes" json:"userCommentTimes,omitempty"`
	CompanyIssued        string  `protobuf:"bytes,17,opt,name=companyIssued" json:"companyIssued,omitempty"`
	Country              string  `protobuf:"bytes,18,opt,name=country" json:"country,omitempty"`
	CommentScore         float32 `protobuf:"fixed32,19,opt,name=commentScore" json:"commentScore,omitempty"`
	Is3D                 int64   `protobuf:"varint,20,opt,name=is3D" json:"is3D,omitempty"`
	IsDMAX               int64   `protobuf:"varint,21,opt,name=isDMAX" json:"isDMAX,omitempty"`
	IsFilter             int64   `protobuf:"varint,22,opt,name=isFilter" json:"isFilter,omitempty"`
	IsHot                int64   `protobuf:"varint,23,opt,name=isHot" json:"isHot,omitempty"`
	IsIMAX               int64   `protobuf:"varint,24,opt,name=isIMAX" json:"isIMAX,omitempty"`
	IsIMAX3D             int64   `protobuf:"varint,25,opt,name=isIMAX3D" json:"isIMAX3D,omitempty"`
	IsNew                int64   `protobuf:"varint,26,opt,name=isNew" json:"isNew,omitempty"`
	RDay                 int64   `protobuf:"varint,27,opt,name=rDay" json:"rDay,omitempty"`
	RMonth               int64   `protobuf:"varint,28,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear                int64   `protobuf:"varint,29,opt,name=rYear" json:"rYear,omitempty"`
	CommonSpecial        string  `protobuf:"bytes,30,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
}

func (m *FilmAllMessage) Reset()                    { *m = FilmAllMessage{} }
func (m *FilmAllMessage) String() string            { return proto.CompactTextString(m) }
func (*FilmAllMessage) ProtoMessage()               {}
func (*FilmAllMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FilmAllMessage) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *FilmAllMessage) GetFilmLong() int64 {
	if m != nil {
		return m.FilmLong
	}
	return 0
}

func (m *FilmAllMessage) GetIsSelectSeat() int64 {
	if m != nil {
		return m.IsSelectSeat
	}
	return 0
}

func (m *FilmAllMessage) GetFilmPrice() float32 {
	if m != nil {
		return m.FilmPrice
	}
	return 0
}

func (m *FilmAllMessage) GetFilmScreenwriter() string {
	if m != nil {
		return m.FilmScreenwriter
	}
	return ""
}

func (m *FilmAllMessage) GetCommentNum() int64 {
	if m != nil {
		return m.CommentNum
	}
	return 0
}

func (m *FilmAllMessage) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *FilmAllMessage) GetIsSupportInlineWatch() int64 {
	if m != nil {
		return m.IsSupportInlineWatch
	}
	return 0
}

func (m *FilmAllMessage) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *FilmAllMessage) GetBigType() int64 {
	if m != nil {
		return m.BigType
	}
	return 0
}

func (m *FilmAllMessage) GetFilmDrama() string {
	if m != nil {
		return m.FilmDrama
	}
	return ""
}

func (m *FilmAllMessage) GetUserAccessTimes() int64 {
	if m != nil {
		return m.UserAccessTimes
	}
	return 0
}

func (m *FilmAllMessage) GetFilmBoxoffice() float32 {
	if m != nil {
		return m.FilmBoxoffice
	}
	return 0
}

func (m *FilmAllMessage) GetFilmDirector() string {
	if m != nil {
		return m.FilmDirector
	}
	return ""
}

func (m *FilmAllMessage) GetUserLikeWatchTimes() int64 {
	if m != nil {
		return m.UserLikeWatchTimes
	}
	return 0
}

func (m *FilmAllMessage) GetUserCommentTimes() int64 {
	if m != nil {
		return m.UserCommentTimes
	}
	return 0
}

func (m *FilmAllMessage) GetCompanyIssued() string {
	if m != nil {
		return m.CompanyIssued
	}
	return ""
}

func (m *FilmAllMessage) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *FilmAllMessage) GetCommentScore() float32 {
	if m != nil {
		return m.CommentScore
	}
	return 0
}

func (m *FilmAllMessage) GetIs3D() int64 {
	if m != nil {
		return m.Is3D
	}
	return 0
}

func (m *FilmAllMessage) GetIsDMAX() int64 {
	if m != nil {
		return m.IsDMAX
	}
	return 0
}

func (m *FilmAllMessage) GetIsFilter() int64 {
	if m != nil {
		return m.IsFilter
	}
	return 0
}

func (m *FilmAllMessage) GetIsHot() int64 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *FilmAllMessage) GetIsIMAX() int64 {
	if m != nil {
		return m.IsIMAX
	}
	return 0
}

func (m *FilmAllMessage) GetIsIMAX3D() int64 {
	if m != nil {
		return m.IsIMAX3D
	}
	return 0
}

func (m *FilmAllMessage) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *FilmAllMessage) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *FilmAllMessage) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *FilmAllMessage) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *FilmAllMessage) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

type MovieDetailReq struct {
	LocationId int64 `protobuf:"varint,1,opt,name=locationId" json:"locationId,omitempty"`
	MovieId    int64 `protobuf:"varint,2,opt,name=movieId" json:"movieId,omitempty"`
}

func (m *MovieDetailReq) Reset()                    { *m = MovieDetailReq{} }
func (m *MovieDetailReq) String() string            { return proto.CompactTextString(m) }
func (*MovieDetailReq) ProtoMessage()               {}
func (*MovieDetailReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MovieDetailReq) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

func (m *MovieDetailReq) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

type MovieDetailRep struct {
	Image         string   `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	TitleCn       string   `protobuf:"bytes,2,opt,name=titleCn" json:"titleCn,omitempty"`
	TitleEn       string   `protobuf:"bytes,3,opt,name=titleEn" json:"titleEn,omitempty"`
	Rating        string   `protobuf:"bytes,4,opt,name=rating" json:"rating,omitempty"`
	Year          int64    `protobuf:"varint,5,opt,name=year" json:"year,omitempty"`
	Content       string   `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Type          []string `protobuf:"bytes,7,rep,name=type" json:"type,omitempty"`
	RunTime       string   `protobuf:"bytes,8,opt,name=runTime" json:"runTime,omitempty"`
	CommonSpecial string   `protobuf:"bytes,9,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
	Director      string   `protobuf:"bytes,10,opt,name=director" json:"director,omitempty"`
	Release       *Release `protobuf:"bytes,11,opt,name=release" json:"release,omitempty"`
}

func (m *MovieDetailRep) Reset()                    { *m = MovieDetailRep{} }
func (m *MovieDetailRep) String() string            { return proto.CompactTextString(m) }
func (*MovieDetailRep) ProtoMessage()               {}
func (*MovieDetailRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MovieDetailRep) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MovieDetailRep) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

func (m *MovieDetailRep) GetTitleEn() string {
	if m != nil {
		return m.TitleEn
	}
	return ""
}

func (m *MovieDetailRep) GetRating() string {
	if m != nil {
		return m.Rating
	}
	return ""
}

func (m *MovieDetailRep) GetYear() int64 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *MovieDetailRep) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *MovieDetailRep) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *MovieDetailRep) GetRunTime() string {
	if m != nil {
		return m.RunTime
	}
	return ""
}

func (m *MovieDetailRep) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func (m *MovieDetailRep) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

func (m *MovieDetailRep) GetRelease() *Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type Release struct {
	Location string `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Date     string `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
}

func (m *Release) Reset()                    { *m = Release{} }
func (m *Release) String() string            { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()               {}
func (*Release) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Release) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Release) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type MovieCreditsWithTypesReq struct {
}

func (m *MovieCreditsWithTypesReq) Reset()                    { *m = MovieCreditsWithTypesReq{} }
func (m *MovieCreditsWithTypesReq) String() string            { return proto.CompactTextString(m) }
func (*MovieCreditsWithTypesReq) ProtoMessage()               {}
func (*MovieCreditsWithTypesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type MovieCreditsWithTypesRep struct {
	Types []*Type `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (m *MovieCreditsWithTypesRep) Reset()                    { *m = MovieCreditsWithTypesRep{} }
func (m *MovieCreditsWithTypesRep) String() string            { return proto.CompactTextString(m) }
func (*MovieCreditsWithTypesRep) ProtoMessage()               {}
func (*MovieCreditsWithTypesRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MovieCreditsWithTypesRep) GetTypes() []*Type {
	if m != nil {
		return m.Types
	}
	return nil
}

type Type struct {
	TypeName   string     `protobuf:"bytes,1,opt,name=typeName" json:"typeName,omitempty"`
	TypeNameEc string     `protobuf:"bytes,2,opt,name=typeNameEc" json:"typeNameEc,omitempty"`
	Persons    []*Persons `protobuf:"bytes,3,rep,name=persons" json:"persons,omitempty"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Type) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *Type) GetTypeNameEc() string {
	if m != nil {
		return m.TypeNameEc
	}
	return ""
}

func (m *Type) GetPersons() []*Persons {
	if m != nil {
		return m.Persons
	}
	return nil
}

type Persons struct {
	Image     string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NameEn    string `protobuf:"bytes,3,opt,name=nameEn" json:"nameEn,omitempty"`
	RoleCover string `protobuf:"bytes,4,opt,name=roleCover" json:"roleCover,omitempty"`
	Personate string `protobuf:"bytes,5,opt,name=personate" json:"personate,omitempty"`
}

func (m *Persons) Reset()                    { *m = Persons{} }
func (m *Persons) String() string            { return proto.CompactTextString(m) }
func (*Persons) ProtoMessage()               {}
func (*Persons) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Persons) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Persons) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Persons) GetNameEn() string {
	if m != nil {
		return m.NameEn
	}
	return ""
}

func (m *Persons) GetRoleCover() string {
	if m != nil {
		return m.RoleCover
	}
	return ""
}

func (m *Persons) GetPersonate() string {
	if m != nil {
		return m.Personate
	}
	return ""
}

type ImageAllReq struct {
}

func (m *ImageAllReq) Reset()                    { *m = ImageAllReq{} }
func (m *ImageAllReq) String() string            { return proto.CompactTextString(m) }
func (*ImageAllReq) ProtoMessage()               {}
func (*ImageAllReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type ImageAllRep struct {
	Images []*Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *ImageAllRep) Reset()                    { *m = ImageAllRep{} }
func (m *ImageAllRep) String() string            { return proto.CompactTextString(m) }
func (*ImageAllRep) ProtoMessage()               {}
func (*ImageAllRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ImageAllRep) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type Image struct {
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Image) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type HotCommentReq struct {
}

func (m *HotCommentReq) Reset()                    { *m = HotCommentReq{} }
func (m *HotCommentReq) String() string            { return proto.CompactTextString(m) }
func (*HotCommentReq) ProtoMessage()               {}
func (*HotCommentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type HotCommentRep struct {
	Data *CommentData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *HotCommentRep) Reset()                    { *m = HotCommentRep{} }
func (m *HotCommentRep) String() string            { return proto.CompactTextString(m) }
func (*HotCommentRep) ProtoMessage()               {}
func (*HotCommentRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *HotCommentRep) GetData() *CommentData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CommentData struct {
	Mini *CommentMini `protobuf:"bytes,1,opt,name=mini" json:"mini,omitempty"`
	Plus *CommentPlus `protobuf:"bytes,2,opt,name=plus" json:"plus,omitempty"`
}

func (m *CommentData) Reset()                    { *m = CommentData{} }
func (m *CommentData) String() string            { return proto.CompactTextString(m) }
func (*CommentData) ProtoMessage()               {}
func (*CommentData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CommentData) GetMini() *CommentMini {
	if m != nil {
		return m.Mini
	}
	return nil
}

func (m *CommentData) GetPlus() *CommentPlus {
	if m != nil {
		return m.Plus
	}
	return nil
}

type CommentMini struct {
	List  []*CommentRecord `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Total int64            `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *CommentMini) Reset()                    { *m = CommentMini{} }
func (m *CommentMini) String() string            { return proto.CompactTextString(m) }
func (*CommentMini) ProtoMessage()               {}
func (*CommentMini) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CommentMini) GetList() []*CommentRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CommentMini) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type CommentPlus struct {
	List  []*CommentRecord `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Total int64            `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *CommentPlus) Reset()                    { *m = CommentPlus{} }
func (m *CommentPlus) String() string            { return proto.CompactTextString(m) }
func (*CommentPlus) ProtoMessage()               {}
func (*CommentPlus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CommentPlus) GetList() []*CommentRecord {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CommentPlus) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type CommentRecord struct {
	Title    string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	HeadImg  string `protobuf:"bytes,3,opt,name=headImg" json:"headImg,omitempty"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
}

func (m *CommentRecord) Reset()                    { *m = CommentRecord{} }
func (m *CommentRecord) String() string            { return proto.CompactTextString(m) }
func (*CommentRecord) ProtoMessage()               {}
func (*CommentRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CommentRecord) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CommentRecord) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CommentRecord) GetHeadImg() string {
	if m != nil {
		return m.HeadImg
	}
	return ""
}

func (m *CommentRecord) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

type LocationMoviesReq struct {
}

func (m *LocationMoviesReq) Reset()                    { *m = LocationMoviesReq{} }
func (m *LocationMoviesReq) String() string            { return proto.CompactTextString(m) }
func (*LocationMoviesReq) ProtoMessage()               {}
func (*LocationMoviesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type LocationMoviesRep struct {
	BImg string `protobuf:"bytes,1,opt,name=bImg" json:"bImg,omitempty"`
}

func (m *LocationMoviesRep) Reset()                    { *m = LocationMoviesRep{} }
func (m *LocationMoviesRep) String() string            { return proto.CompactTextString(m) }
func (*LocationMoviesRep) ProtoMessage()               {}
func (*LocationMoviesRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *LocationMoviesRep) GetBImg() string {
	if m != nil {
		return m.BImg
	}
	return ""
}

func init() {
	proto.RegisterType((*HotPlayMoviesReq)(nil), "pb.HotPlayMoviesReq")
	proto.RegisterType((*HotPlayMoviesRep)(nil), "pb.HotPlayMoviesRep")
	proto.RegisterType((*HotMovie)(nil), "pb.HotMovie")
	proto.RegisterType((*FilmAllMessage)(nil), "pb.FilmAllMessage")
	proto.RegisterType((*MovieDetailReq)(nil), "pb.MovieDetailReq")
	proto.RegisterType((*MovieDetailRep)(nil), "pb.MovieDetailRep")
	proto.RegisterType((*Release)(nil), "pb.Release")
	proto.RegisterType((*MovieCreditsWithTypesReq)(nil), "pb.MovieCreditsWithTypesReq")
	proto.RegisterType((*MovieCreditsWithTypesRep)(nil), "pb.MovieCreditsWithTypesRep")
	proto.RegisterType((*Type)(nil), "pb.Type")
	proto.RegisterType((*Persons)(nil), "pb.Persons")
	proto.RegisterType((*ImageAllReq)(nil), "pb.ImageAllReq")
	proto.RegisterType((*ImageAllRep)(nil), "pb.ImageAllRep")
	proto.RegisterType((*Image)(nil), "pb.Image")
	proto.RegisterType((*HotCommentReq)(nil), "pb.HotCommentReq")
	proto.RegisterType((*HotCommentRep)(nil), "pb.HotCommentRep")
	proto.RegisterType((*CommentData)(nil), "pb.CommentData")
	proto.RegisterType((*CommentMini)(nil), "pb.CommentMini")
	proto.RegisterType((*CommentPlus)(nil), "pb.CommentPlus")
	proto.RegisterType((*CommentRecord)(nil), "pb.CommentRecord")
	proto.RegisterType((*LocationMoviesReq)(nil), "pb.LocationMoviesReq")
	proto.RegisterType((*LocationMoviesRep)(nil), "pb.LocationMoviesRep")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FilmServiceExt service

type FilmServiceExtClient interface {
	// 获取正在售票的影片
	HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, opts ...client.CallOption) (*HotPlayMoviesRep, error)
	// 电影详情
	MovieDetail(ctx context.Context, in *MovieDetailReq, opts ...client.CallOption) (*MovieDetailRep, error)
	// 获取导演与演员信息
	MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, opts ...client.CallOption) (*MovieCreditsWithTypesRep, error)
	// 获取海报信息
	ImageAll(ctx context.Context, in *ImageAllReq, opts ...client.CallOption) (*ImageAllRep, error)
	// 精彩影评
	HotComment(ctx context.Context, in *HotCommentReq, opts ...client.CallOption) (*HotCommentRep, error)
	// 即将上映的影片
	LocationMovies(ctx context.Context, in *LocationMoviesReq, opts ...client.CallOption) (*LocationMoviesRep, error)
}

type filmServiceExtClient struct {
	c           client.Client
	serviceName string
}

func NewFilmServiceExtClient(serviceName string, c client.Client) FilmServiceExtClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &filmServiceExtClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *filmServiceExtClient) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, opts ...client.CallOption) (*HotPlayMoviesRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.HotPlayMovies", in)
	out := new(HotPlayMoviesRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) MovieDetail(ctx context.Context, in *MovieDetailReq, opts ...client.CallOption) (*MovieDetailRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.MovieDetail", in)
	out := new(MovieDetailRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, opts ...client.CallOption) (*MovieCreditsWithTypesRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.MovieCreditsWithTypes", in)
	out := new(MovieCreditsWithTypesRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) ImageAll(ctx context.Context, in *ImageAllReq, opts ...client.CallOption) (*ImageAllRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.ImageAll", in)
	out := new(ImageAllRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) HotComment(ctx context.Context, in *HotCommentReq, opts ...client.CallOption) (*HotCommentRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.HotComment", in)
	out := new(HotCommentRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) LocationMovies(ctx context.Context, in *LocationMoviesReq, opts ...client.CallOption) (*LocationMoviesRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.LocationMovies", in)
	out := new(LocationMoviesRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FilmServiceExt service

type FilmServiceExtHandler interface {
	// 获取正在售票的影片
	HotPlayMovies(context.Context, *HotPlayMoviesReq, *HotPlayMoviesRep) error
	// 电影详情
	MovieDetail(context.Context, *MovieDetailReq, *MovieDetailRep) error
	// 获取导演与演员信息
	MovieCreditsWithTypes(context.Context, *MovieCreditsWithTypesReq, *MovieCreditsWithTypesRep) error
	// 获取海报信息
	ImageAll(context.Context, *ImageAllReq, *ImageAllRep) error
	// 精彩影评
	HotComment(context.Context, *HotCommentReq, *HotCommentRep) error
	// 即将上映的影片
	LocationMovies(context.Context, *LocationMoviesReq, *LocationMoviesRep) error
}

func RegisterFilmServiceExtHandler(s server.Server, hdlr FilmServiceExtHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&FilmServiceExt{hdlr}, opts...))
}

type FilmServiceExt struct {
	FilmServiceExtHandler
}

func (h *FilmServiceExt) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, out *HotPlayMoviesRep) error {
	return h.FilmServiceExtHandler.HotPlayMovies(ctx, in, out)
}

func (h *FilmServiceExt) MovieDetail(ctx context.Context, in *MovieDetailReq, out *MovieDetailRep) error {
	return h.FilmServiceExtHandler.MovieDetail(ctx, in, out)
}

func (h *FilmServiceExt) MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, out *MovieCreditsWithTypesRep) error {
	return h.FilmServiceExtHandler.MovieCreditsWithTypes(ctx, in, out)
}

func (h *FilmServiceExt) ImageAll(ctx context.Context, in *ImageAllReq, out *ImageAllRep) error {
	return h.FilmServiceExtHandler.ImageAll(ctx, in, out)
}

func (h *FilmServiceExt) HotComment(ctx context.Context, in *HotCommentReq, out *HotCommentRep) error {
	return h.FilmServiceExtHandler.HotComment(ctx, in, out)
}

func (h *FilmServiceExt) LocationMovies(ctx context.Context, in *LocationMoviesReq, out *LocationMoviesRep) error {
	return h.FilmServiceExtHandler.LocationMovies(ctx, in, out)
}

func init() { proto.RegisterFile("film.ext.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x6e, 0x1b, 0xb7,
	0x12, 0x8e, 0x24, 0xdb, 0xd2, 0x52, 0xfe, 0x65, 0xec, 0x1c, 0x1e, 0x9d, 0xc4, 0xf0, 0xd9, 0x26,
	0xa8, 0xd1, 0x0b, 0xa1, 0x70, 0x02, 0x14, 0x2d, 0x50, 0xa0, 0xae, 0xe5, 0xc0, 0x0a, 0x6c, 0xc3,
	0xa0, 0x52, 0xa4, 0xbd, 0xa4, 0x57, 0x8c, 0x4c, 0x64, 0x77, 0xb9, 0xe5, 0x52, 0x71, 0xfc, 0x04,
	0x79, 0xa3, 0x16, 0xe8, 0xd3, 0x15, 0x33, 0xe4, 0xae, 0x76, 0xa3, 0x55, 0x6f, 0x7a, 0x25, 0xce,
	0x37, 0xc3, 0x21, 0x67, 0xf6, 0xe3, 0x47, 0x8a, 0x6c, 0xbf, 0x57, 0x71, 0x32, 0x94, 0x9f, 0xec,
	0x30, 0x33, 0xda, 0x6a, 0xda, 0xce, 0x6e, 0xc3, 0x21, 0xd9, 0xbd, 0xd0, 0xf6, 0x26, 0x16, 0x0f,
	0x57, 0xfa, 0xa3, 0x92, 0x39, 0x97, 0xbf, 0xd3, 0x01, 0xe9, 0xc5, 0x3a, 0x12, 0x56, 0xe9, 0x94,
	0xb5, 0x8e, 0x5a, 0xc7, 0x1d, 0x5e, 0xda, 0xe1, 0xe5, 0x52, 0x7c, 0x46, 0x29, 0x59, 0xb3, 0x32,
	0xb7, 0x3e, 0x16, 0xc7, 0xf4, 0x39, 0xd9, 0x48, 0x30, 0x80, 0xb5, 0x8f, 0x3a, 0xc7, 0xfd, 0x93,
	0xcd, 0x61, 0x76, 0x3b, 0xbc, 0xd0, 0x16, 0x67, 0x71, 0xef, 0x0b, 0xff, 0x5a, 0x23, 0xbd, 0x02,
	0xa4, 0x4f, 0x49, 0x20, 0x22, 0xab, 0xcd, 0xb5, 0x48, 0x24, 0x6b, 0x1d, 0x75, 0x8e, 0x03, 0xbe,
	0x00, 0xe8, 0x73, 0xb2, 0x15, 0xe9, 0x24, 0xd1, 0xe9, 0x24, 0x93, 0x91, 0x12, 0x31, 0x6b, 0x1f,
	0xb5, 0x8e, 0x03, 0x5e, 0x07, 0x69, 0x48, 0x36, 0xa7, 0xca, 0xc8, 0x32, 0x4d, 0x07, 0x83, 0x6a,
	0x18, 0xdd, 0x25, 0x1d, 0x95, 0xcc, 0xd8, 0x1a, 0xba, 0x60, 0x08, 0x05, 0xa8, 0xfc, 0xe5, 0x88,
	0xad, 0xbb, 0x02, 0x60, 0x4c, 0x9f, 0x90, 0x0d, 0x95, 0x8f, 0xae, 0x4e, 0x7f, 0x65, 0x1b, 0x88,
	0x7a, 0x0b, 0x9a, 0xa3, 0xf2, 0xd7, 0x2a, 0xb6, 0xd2, 0xb0, 0xae, 0x6b, 0x4e, 0x61, 0xd3, 0x7d,
	0xb2, 0xae, 0xf2, 0x0b, 0x6d, 0x59, 0x0f, 0x1d, 0xce, 0x70, 0x99, 0xc6, 0x90, 0x29, 0x28, 0x32,
	0x8d, 0xcb, 0x4c, 0x30, 0x7a, 0x39, 0x62, 0xa4, 0xc8, 0xe4, 0x6c, 0x97, 0xe9, 0x5a, 0xde, 0xb3,
	0x7e, 0x91, 0xe9, 0x5a, 0xde, 0x43, 0xa6, 0x58, 0xa6, 0x33, 0x7b, 0xc7, 0x36, 0x5d, 0x26, 0x67,
	0x51, 0x46, 0xba, 0xd8, 0xd0, 0xf1, 0x94, 0x6d, 0xa1, 0xa3, 0x30, 0xa1, 0x32, 0x33, 0x12, 0x0f,
	0x6c, 0xdb, 0x55, 0x06, 0x63, 0xc8, 0x62, 0xae, 0x74, 0x6a, 0xef, 0xd8, 0x8e, 0xcb, 0xe2, 0x2c,
	0x58, 0xd3, 0xfc, 0x26, 0x85, 0x61, 0xbb, 0x6e, 0x4d, 0x34, 0xe8, 0x11, 0xe9, 0x1b, 0x61, 0x55,
	0x3a, 0x7b, 0xad, 0x52, 0x11, 0xb3, 0xbd, 0xa3, 0xd6, 0x71, 0x9b, 0x57, 0x21, 0xba, 0x49, 0x5a,
	0x96, 0x51, 0xec, 0x66, 0xcb, 0xc2, 0x5e, 0xac, 0xb2, 0xb1, 0x3c, 0x4b, 0xd9, 0x63, 0xc4, 0x0a,
	0xb3, 0xf4, 0x9c, 0xa7, 0x6c, 0xbf, 0xe2, 0x39, 0x4f, 0x91, 0x40, 0x0f, 0x99, 0x64, 0x07, 0x08,
	0xe3, 0x18, 0xd6, 0xbd, 0x17, 0xa9, 0x95, 0xd3, 0x33, 0x3d, 0x4f, 0x2d, 0x7b, 0x82, 0x7b, 0xaa,
	0x42, 0xe1, 0x1f, 0x5d, 0xb2, 0xfd, 0x5a, 0xc5, 0xc9, 0x69, 0x1c, 0x5f, 0xc9, 0x3c, 0x17, 0x33,
	0x09, 0x89, 0x62, 0x3d, 0xd3, 0xc8, 0xc4, 0x80, 0xe3, 0x18, 0xda, 0x0c, 0xbc, 0xbf, 0xd4, 0xe9,
	0x0c, 0x39, 0xd3, 0xe1, 0xa5, 0x0d, 0x74, 0x51, 0xf9, 0x44, 0xc6, 0x32, 0xb2, 0x13, 0x29, 0x2c,
	0xd2, 0xa5, 0xc3, 0x6b, 0x18, 0xd0, 0x12, 0xe2, 0x6f, 0x8c, 0x8a, 0x24, 0x92, 0xa6, 0xcd, 0x17,
	0x00, 0xfd, 0x86, 0xec, 0x82, 0x31, 0x89, 0x8c, 0x94, 0xe9, 0xbd, 0x51, 0x40, 0x8b, 0x75, 0x5c,
	0x7d, 0x09, 0xa7, 0x87, 0x84, 0x00, 0x5b, 0x65, 0x6a, 0xaf, 0xe7, 0x89, 0xa7, 0x55, 0x05, 0x29,
	0x76, 0x8a, 0xc4, 0xed, 0x62, 0x8e, 0xd2, 0xa6, 0x27, 0x64, 0x5f, 0xe5, 0x93, 0x79, 0x96, 0x69,
	0x63, 0xc7, 0x69, 0xac, 0x52, 0xf9, 0x4e, 0xd8, 0xe8, 0xce, 0x33, 0xad, 0xd1, 0x07, 0xf9, 0x22,
	0x23, 0x85, 0x95, 0xa7, 0x16, 0xa9, 0x17, 0xf0, 0xd2, 0x86, 0x8f, 0x71, 0xab, 0x66, 0x6f, 0xa1,
	0xeb, 0x8e, 0x7b, 0x85, 0x59, 0xd4, 0x3b, 0x32, 0x22, 0x11, 0x48, 0xbf, 0x80, 0x2f, 0x00, 0x7a,
	0x4c, 0x76, 0xe6, 0xb9, 0x34, 0xa7, 0x51, 0x24, 0xf3, 0xfc, 0xad, 0x4a, 0x64, 0xee, 0xb9, 0xf8,
	0x25, 0x0c, 0x07, 0x16, 0xa6, 0xfd, 0xac, 0x3f, 0xe9, 0xf7, 0xef, 0xa1, 0x77, 0x5b, 0xd8, 0xbb,
	0x3a, 0x08, 0x5f, 0x00, 0x93, 0xfb, 0x03, 0x8a, 0x44, 0x0d, 0x78, 0x0d, 0xa3, 0x43, 0x42, 0x21,
	0xf9, 0xa5, 0xfa, 0xe0, 0x0a, 0x73, 0xcb, 0x3a, 0xf2, 0x36, 0x78, 0xe0, 0x9b, 0x00, 0x7a, 0xe6,
	0x3a, 0xeb, 0xa2, 0x1d, 0xa7, 0x97, 0x70, 0x2f, 0x2b, 0x99, 0x48, 0x1f, 0xc6, 0x79, 0x3e, 0x97,
	0x53, 0x24, 0xb8, 0x93, 0x95, 0x05, 0x08, 0xdd, 0x8a, 0x80, 0x73, 0xe6, 0xc1, 0x13, 0xbd, 0x30,
	0x61, 0xff, 0xfe, 0x0b, 0x4e, 0x22, 0x6d, 0x24, 0x72, 0xbe, 0xcd, 0x6b, 0x58, 0x29, 0x2f, 0xfb,
	0x8d, 0xf2, 0x72, 0xb0, 0x52, 0x5e, 0x9e, 0xac, 0x92, 0x97, 0xff, 0x34, 0xcb, 0x0b, 0x5b, 0x29,
	0x2f, 0xff, 0x5d, 0x25, 0x2f, 0x83, 0xaa, 0xbc, 0x14, 0x62, 0xf1, 0xbf, 0x46, 0xb1, 0x78, 0xda,
	0x2c, 0x16, 0xcf, 0xaa, 0x62, 0xb1, 0x24, 0xd2, 0x87, 0x0d, 0x22, 0x1d, 0xbe, 0x21, 0xdb, 0xa8,
	0xf8, 0x23, 0x69, 0x85, 0x8a, 0xe1, 0xc6, 0x39, 0x24, 0xa4, 0xb8, 0x61, 0xc6, 0x53, 0x7f, 0x8f,
	0x54, 0x90, 0xaa, 0xc0, 0xb5, 0x6b, 0x02, 0x17, 0xfe, 0xd9, 0xfe, 0x22, 0x59, 0x86, 0xc5, 0x25,
	0x62, 0x26, 0xbd, 0x0a, 0x38, 0xa3, 0xaa, 0x4b, 0xed, 0x95, 0xba, 0xd4, 0xa9, 0xeb, 0x12, 0x14,
	0x8f, 0x42, 0xe7, 0x2f, 0x0b, 0x6f, 0x41, 0xa3, 0x1e, 0xa0, 0x76, 0x7f, 0x5f, 0xc0, 0xd8, 0x51,
	0x24, 0xb5, 0x32, 0xb5, 0x78, 0xb2, 0x91, 0x22, 0x68, 0x96, 0xea, 0xd6, 0xc5, 0x2b, 0xcd, 0xa9,
	0x1b, 0x23, 0x5d, 0x33, 0x4f, 0x81, 0x82, 0x78, 0x82, 0x03, 0x5e, 0x98, 0xcb, 0x2d, 0x0c, 0x9a,
	0xee, 0xb9, 0x01, 0xe9, 0x15, 0x77, 0x1a, 0x9e, 0xdf, 0x80, 0x97, 0x36, 0x7d, 0x41, 0xba, 0x46,
	0xc6, 0x52, 0xe4, 0x12, 0x8f, 0x6f, 0xff, 0xa4, 0x0f, 0x77, 0x2f, 0x77, 0x10, 0x2f, 0x7c, 0xe1,
	0xf7, 0xa4, 0xeb, 0xb1, 0xa5, 0x0b, 0x3f, 0x58, 0x5c, 0xf8, 0xb0, 0xfb, 0xa9, 0xb0, 0xd2, 0x37,
	0x0d, 0xc7, 0xe1, 0x80, 0x30, 0xec, 0xf9, 0x99, 0x91, 0x53, 0x65, 0xf3, 0x77, 0xca, 0xde, 0x81,
	0x74, 0xc0, 0xe3, 0x21, 0xfc, 0x61, 0xa5, 0x2f, 0xa3, 0x87, 0x64, 0x1d, 0xaa, 0xcf, 0xf1, 0x76,
	0xef, 0x9f, 0xf4, 0x60, 0x5f, 0xe0, 0xe4, 0x0e, 0x0e, 0x15, 0x59, 0x43, 0x09, 0x1a, 0x90, 0x1e,
	0x00, 0xfe, 0x21, 0x80, 0xfb, 0x29, 0x6c, 0xa0, 0x4a, 0x31, 0x3e, 0x8f, 0xfc, 0xae, 0x2a, 0x08,
	0x54, 0x9f, 0x49, 0x93, 0xeb, 0x34, 0x67, 0x1d, 0x5c, 0x05, 0xab, 0xbf, 0x71, 0x10, 0x2f, 0x7c,
	0xe1, 0xe7, 0x16, 0xe9, 0x7a, 0x70, 0x05, 0x61, 0x28, 0x59, 0x4b, 0x61, 0x03, 0xbe, 0x70, 0x18,
	0x03, 0x21, 0xe0, 0xb7, 0x64, 0x8a, 0xb7, 0x40, 0x33, 0x8d, 0x8e, 0xe5, 0x99, 0xfe, 0x28, 0x8d,
	0xe7, 0xca, 0x02, 0x00, 0xaf, 0x5b, 0x16, 0xfa, 0xe8, 0x2e, 0x87, 0x05, 0x10, 0x6e, 0x91, 0xfe,
	0x18, 0x16, 0x3c, 0x8d, 0xe1, 0x28, 0x84, 0xdf, 0x56, 0xcd, 0x8c, 0xfe, 0x9f, 0x6c, 0xe0, 0x76,
	0x8a, 0x9e, 0x05, 0x50, 0x0d, 0x06, 0x70, 0xef, 0x08, 0x9f, 0x91, 0x75, 0x04, 0x9a, 0xeb, 0x08,
	0x77, 0xc8, 0xd6, 0x85, 0xb6, 0x5e, 0xf4, 0x60, 0x85, 0x57, 0x75, 0x20, 0xa3, 0x5f, 0xe1, 0x27,
	0x16, 0x38, 0xad, 0x7f, 0xb2, 0x03, 0x2b, 0x78, 0xef, 0x48, 0x58, 0x81, 0xdf, 0x5c, 0x84, 0xef,
	0x48, 0xbf, 0x02, 0xc2, 0x9c, 0x44, 0xa5, 0xaa, 0x61, 0xce, 0x95, 0x4a, 0x15, 0x47, 0x27, 0x04,
	0x65, 0xf1, 0x3c, 0xc7, 0x16, 0xd6, 0x83, 0x6e, 0xe2, 0x79, 0xce, 0xd1, 0x19, 0xbe, 0x29, 0x13,
	0xc3, 0x4c, 0xfa, 0x82, 0xac, 0xc5, 0x0a, 0x1f, 0x93, 0x50, 0xee, 0x5e, 0x65, 0x0e, 0x97, 0x91,
	0x36, 0x53, 0x8e, 0x6e, 0xa8, 0xd5, 0x6a, 0xeb, 0x9f, 0x81, 0x1d, 0xee, 0x8c, 0x4a, 0x2e, 0x58,
	0xe0, 0xdf, 0xe5, 0x9a, 0x93, 0xad, 0x5a, 0x30, 0x86, 0x81, 0x30, 0x14, 0xed, 0x45, 0xa3, 0x7a,
	0xee, 0xdb, 0xf5, 0x73, 0xcf, 0x48, 0xf7, 0x4e, 0x8a, 0xe9, 0x38, 0x99, 0x15, 0xba, 0xe2, 0x4d,
	0xe0, 0x77, 0xaa, 0xa2, 0x0f, 0x48, 0x2f, 0xc7, 0x96, 0xd2, 0x0e, 0x1f, 0x93, 0xbd, 0x4b, 0x7f,
	0xf6, 0xca, 0x17, 0x79, 0xf8, 0xf5, 0x32, 0x88, 0xcf, 0xee, 0x5b, 0x48, 0xee, 0x1f, 0x3b, 0x30,
	0x3e, 0xf9, 0xdc, 0x71, 0x6f, 0xa2, 0x89, 0x34, 0x1f, 0x55, 0x24, 0xcf, 0x3f, 0x59, 0xfa, 0x23,
	0x7e, 0xee, 0xc5, 0x8b, 0x9d, 0xee, 0xfb, 0xa7, 0x78, 0xed, 0xd1, 0x3f, 0x68, 0x42, 0xb3, 0xf0,
	0x11, 0xfd, 0x8e, 0xf4, 0x2b, 0xfa, 0x4a, 0x29, 0x84, 0xd5, 0xd5, 0x7b, 0xb0, 0x8c, 0xc1, 0xc4,
	0x5f, 0xc8, 0x41, 0xa3, 0x10, 0xd0, 0xa7, 0x65, 0x78, 0x83, 0x7e, 0x0c, 0xfe, 0xc9, 0x0b, 0x69,
	0x87, 0xa4, 0x57, 0x9c, 0x0f, 0xba, 0x53, 0x1e, 0x06, 0x77, 0x78, 0x06, 0x5f, 0x00, 0x10, 0xff,
	0x8a, 0x90, 0x05, 0xdb, 0xe9, 0x9e, 0xaf, 0x72, 0x71, 0x1c, 0x06, 0x4b, 0x10, 0xcc, 0xfa, 0x89,
	0x6c, 0xd7, 0x1b, 0x4e, 0x0f, 0x20, 0x6c, 0xe9, 0xcb, 0x0c, 0x1a, 0xe1, 0x2c, 0x7c, 0x74, 0xbb,
	0x81, 0xff, 0xb1, 0x5e, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x4e, 0x72, 0x67, 0x75, 0x0d,
	0x00, 0x00,
}
