// Code generated by protoc-gen-go.
// source: film.ext.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	film.ext.proto

It has these top-level messages:
	HotPlayMoviesReq
	HotPlayMoviesRep
	HotMovie
	FilmAllMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HotPlayMoviesReq struct {
	Location int64 `protobuf:"varint,1,opt,name=location" json:"location,omitempty"`
}

func (m *HotPlayMoviesReq) Reset()                    { *m = HotPlayMoviesReq{} }
func (m *HotPlayMoviesReq) String() string            { return proto.CompactTextString(m) }
func (*HotPlayMoviesReq) ProtoMessage()               {}
func (*HotPlayMoviesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HotPlayMoviesReq) GetLocation() int64 {
	if m != nil {
		return m.Location
	}
	return 0
}

type HotPlayMoviesRep struct {
	Test   int64       `protobuf:"varint,1,opt,name=test" json:"test,omitempty"`
	Movies []*HotMovie `protobuf:"bytes,2,rep,name=movies" json:"movies,omitempty"`
}

func (m *HotPlayMoviesRep) Reset()                    { *m = HotPlayMoviesRep{} }
func (m *HotPlayMoviesRep) String() string            { return proto.CompactTextString(m) }
func (*HotPlayMoviesRep) ProtoMessage()               {}
func (*HotPlayMoviesRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HotPlayMoviesRep) GetTest() int64 {
	if m != nil {
		return m.Test
	}
	return 0
}

func (m *HotPlayMoviesRep) GetMovies() []*HotMovie {
	if m != nil {
		return m.Movies
	}
	return nil
}

type HotMovie struct {
	ActorName     []string `protobuf:"bytes,1,rep,name=actorName" json:"actorName,omitempty"`
	CommonSpecial string   `protobuf:"bytes,2,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
	DirectorName  string   `protobuf:"bytes,3,opt,name=directorName" json:"directorName,omitempty"`
	Img           string   `protobuf:"bytes,4,opt,name=img" json:"img,omitempty"`
	Is3D          int64    `protobuf:"varint,5,opt,name=is3D" json:"is3D,omitempty"`
	IsDMAX        int64    `protobuf:"varint,6,opt,name=isDMAX" json:"isDMAX,omitempty"`
	IsFilter      int64    `protobuf:"varint,7,opt,name=isFilter" json:"isFilter,omitempty"`
	IsHot         int64    `protobuf:"varint,8,opt,name=isHot" json:"isHot,omitempty"`
	IsIMAX        int64    `protobuf:"varint,9,opt,name=isIMAX" json:"isIMAX,omitempty"`
	IsIMAX3D      int64    `protobuf:"varint,10,opt,name=isIMAX3D" json:"isIMAX3D,omitempty"`
	IsNew         int64    `protobuf:"varint,11,opt,name=isNew" json:"isNew,omitempty"`
	Length        int64    `protobuf:"varint,12,opt,name=length" json:"length,omitempty"`
	MovieId       int64    `protobuf:"varint,13,opt,name=movieId" json:"movieId,omitempty"`
	RDay          int64    `protobuf:"varint,14,opt,name=rDay" json:"rDay,omitempty"`
	RMonth        int64    `protobuf:"varint,15,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear         int64    `protobuf:"varint,16,opt,name=rYear" json:"rYear,omitempty"`
	RatingFinal   float32  `protobuf:"fixed32,17,opt,name=ratingFinal" json:"ratingFinal,omitempty"`
	T             string   `protobuf:"bytes,18,opt,name=t" json:"t,omitempty"`
	TitleCn       string   `protobuf:"bytes,19,opt,name=titleCn" json:"titleCn,omitempty"`
	TitleEn       string   `protobuf:"bytes,20,opt,name=titleEn" json:"titleEn,omitempty"`
	Type          string   `protobuf:"bytes,21,opt,name=type" json:"type,omitempty"`
	WantedCount   int64    `protobuf:"varint,22,opt,name=wantedCount" json:"wantedCount,omitempty"`
}

func (m *HotMovie) Reset()                    { *m = HotMovie{} }
func (m *HotMovie) String() string            { return proto.CompactTextString(m) }
func (*HotMovie) ProtoMessage()               {}
func (*HotMovie) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HotMovie) GetActorName() []string {
	if m != nil {
		return m.ActorName
	}
	return nil
}

func (m *HotMovie) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func (m *HotMovie) GetDirectorName() string {
	if m != nil {
		return m.DirectorName
	}
	return ""
}

func (m *HotMovie) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *HotMovie) GetIs3D() int64 {
	if m != nil {
		return m.Is3D
	}
	return 0
}

func (m *HotMovie) GetIsDMAX() int64 {
	if m != nil {
		return m.IsDMAX
	}
	return 0
}

func (m *HotMovie) GetIsFilter() int64 {
	if m != nil {
		return m.IsFilter
	}
	return 0
}

func (m *HotMovie) GetIsHot() int64 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *HotMovie) GetIsIMAX() int64 {
	if m != nil {
		return m.IsIMAX
	}
	return 0
}

func (m *HotMovie) GetIsIMAX3D() int64 {
	if m != nil {
		return m.IsIMAX3D
	}
	return 0
}

func (m *HotMovie) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *HotMovie) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *HotMovie) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

func (m *HotMovie) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *HotMovie) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *HotMovie) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *HotMovie) GetRatingFinal() float32 {
	if m != nil {
		return m.RatingFinal
	}
	return 0
}

func (m *HotMovie) GetT() string {
	if m != nil {
		return m.T
	}
	return ""
}

func (m *HotMovie) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

func (m *HotMovie) GetTitleEn() string {
	if m != nil {
		return m.TitleEn
	}
	return ""
}

func (m *HotMovie) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HotMovie) GetWantedCount() int64 {
	if m != nil {
		return m.WantedCount
	}
	return 0
}

type FilmAllMessage struct {
	Logo                 string  `protobuf:"bytes,1,opt,name=logo" json:"logo,omitempty"`
	FilmLong             int64   `protobuf:"varint,2,opt,name=filmLong" json:"filmLong,omitempty"`
	IsSelectSeat         int64   `protobuf:"varint,3,opt,name=isSelectSeat" json:"isSelectSeat,omitempty"`
	FilmPrice            float32 `protobuf:"fixed32,4,opt,name=filmPrice" json:"filmPrice,omitempty"`
	FilmScreenwriter     string  `protobuf:"bytes,5,opt,name=filmScreenwriter" json:"filmScreenwriter,omitempty"`
	CommentNum           int64   `protobuf:"varint,6,opt,name=commentNum" json:"commentNum,omitempty"`
	FilmName             string  `protobuf:"bytes,7,opt,name=filmName" json:"filmName,omitempty"`
	IsSupportInlineWatch int64   `protobuf:"varint,8,opt,name=isSupportInlineWatch" json:"isSupportInlineWatch,omitempty"`
	CreateAt             string  `protobuf:"bytes,9,opt,name=createAt" json:"createAt,omitempty"`
	BigType              int64   `protobuf:"varint,10,opt,name=bigType" json:"bigType,omitempty"`
	FilmDrama            string  `protobuf:"bytes,11,opt,name=filmDrama" json:"filmDrama,omitempty"`
	UserAccessTimes      int64   `protobuf:"varint,12,opt,name=userAccessTimes" json:"userAccessTimes,omitempty"`
	FilmBoxoffice        float32 `protobuf:"fixed32,13,opt,name=filmBoxoffice" json:"filmBoxoffice,omitempty"`
	FilmDirector         string  `protobuf:"bytes,14,opt,name=filmDirector" json:"filmDirector,omitempty"`
	UserLikeWatchTimes   int64   `protobuf:"varint,15,opt,name=userLikeWatchTimes" json:"userLikeWatchTimes,omitempty"`
	UserCommentTimes     int64   `protobuf:"varint,16,opt,name=userCommentTimes" json:"userCommentTimes,omitempty"`
	CompanyIssued        string  `protobuf:"bytes,17,opt,name=companyIssued" json:"companyIssued,omitempty"`
	Country              string  `protobuf:"bytes,18,opt,name=country" json:"country,omitempty"`
	CommentScore         float32 `protobuf:"fixed32,19,opt,name=commentScore" json:"commentScore,omitempty"`
	Is3D                 int64   `protobuf:"varint,20,opt,name=is3D" json:"is3D,omitempty"`
	IsDMAX               int64   `protobuf:"varint,21,opt,name=isDMAX" json:"isDMAX,omitempty"`
	IsFilter             int64   `protobuf:"varint,22,opt,name=isFilter" json:"isFilter,omitempty"`
	IsHot                int64   `protobuf:"varint,23,opt,name=isHot" json:"isHot,omitempty"`
	IsIMAX               int64   `protobuf:"varint,24,opt,name=isIMAX" json:"isIMAX,omitempty"`
	IsIMAX3D             int64   `protobuf:"varint,25,opt,name=isIMAX3D" json:"isIMAX3D,omitempty"`
	IsNew                int64   `protobuf:"varint,26,opt,name=isNew" json:"isNew,omitempty"`
	RDay                 int64   `protobuf:"varint,27,opt,name=rDay" json:"rDay,omitempty"`
	RMonth               int64   `protobuf:"varint,28,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear                int64   `protobuf:"varint,29,opt,name=rYear" json:"rYear,omitempty"`
	CommonSpecial        string  `protobuf:"bytes,30,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
}

func (m *FilmAllMessage) Reset()                    { *m = FilmAllMessage{} }
func (m *FilmAllMessage) String() string            { return proto.CompactTextString(m) }
func (*FilmAllMessage) ProtoMessage()               {}
func (*FilmAllMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FilmAllMessage) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *FilmAllMessage) GetFilmLong() int64 {
	if m != nil {
		return m.FilmLong
	}
	return 0
}

func (m *FilmAllMessage) GetIsSelectSeat() int64 {
	if m != nil {
		return m.IsSelectSeat
	}
	return 0
}

func (m *FilmAllMessage) GetFilmPrice() float32 {
	if m != nil {
		return m.FilmPrice
	}
	return 0
}

func (m *FilmAllMessage) GetFilmScreenwriter() string {
	if m != nil {
		return m.FilmScreenwriter
	}
	return ""
}

func (m *FilmAllMessage) GetCommentNum() int64 {
	if m != nil {
		return m.CommentNum
	}
	return 0
}

func (m *FilmAllMessage) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *FilmAllMessage) GetIsSupportInlineWatch() int64 {
	if m != nil {
		return m.IsSupportInlineWatch
	}
	return 0
}

func (m *FilmAllMessage) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *FilmAllMessage) GetBigType() int64 {
	if m != nil {
		return m.BigType
	}
	return 0
}

func (m *FilmAllMessage) GetFilmDrama() string {
	if m != nil {
		return m.FilmDrama
	}
	return ""
}

func (m *FilmAllMessage) GetUserAccessTimes() int64 {
	if m != nil {
		return m.UserAccessTimes
	}
	return 0
}

func (m *FilmAllMessage) GetFilmBoxoffice() float32 {
	if m != nil {
		return m.FilmBoxoffice
	}
	return 0
}

func (m *FilmAllMessage) GetFilmDirector() string {
	if m != nil {
		return m.FilmDirector
	}
	return ""
}

func (m *FilmAllMessage) GetUserLikeWatchTimes() int64 {
	if m != nil {
		return m.UserLikeWatchTimes
	}
	return 0
}

func (m *FilmAllMessage) GetUserCommentTimes() int64 {
	if m != nil {
		return m.UserCommentTimes
	}
	return 0
}

func (m *FilmAllMessage) GetCompanyIssued() string {
	if m != nil {
		return m.CompanyIssued
	}
	return ""
}

func (m *FilmAllMessage) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *FilmAllMessage) GetCommentScore() float32 {
	if m != nil {
		return m.CommentScore
	}
	return 0
}

func (m *FilmAllMessage) GetIs3D() int64 {
	if m != nil {
		return m.Is3D
	}
	return 0
}

func (m *FilmAllMessage) GetIsDMAX() int64 {
	if m != nil {
		return m.IsDMAX
	}
	return 0
}

func (m *FilmAllMessage) GetIsFilter() int64 {
	if m != nil {
		return m.IsFilter
	}
	return 0
}

func (m *FilmAllMessage) GetIsHot() int64 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *FilmAllMessage) GetIsIMAX() int64 {
	if m != nil {
		return m.IsIMAX
	}
	return 0
}

func (m *FilmAllMessage) GetIsIMAX3D() int64 {
	if m != nil {
		return m.IsIMAX3D
	}
	return 0
}

func (m *FilmAllMessage) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *FilmAllMessage) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *FilmAllMessage) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *FilmAllMessage) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *FilmAllMessage) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func init() {
	proto.RegisterType((*HotPlayMoviesReq)(nil), "pb.HotPlayMoviesReq")
	proto.RegisterType((*HotPlayMoviesRep)(nil), "pb.HotPlayMoviesRep")
	proto.RegisterType((*HotMovie)(nil), "pb.HotMovie")
	proto.RegisterType((*FilmAllMessage)(nil), "pb.FilmAllMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FilmExtService service

type FilmExtServiceClient interface {
	// 获取最新上映的影片
	HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, opts ...client.CallOption) (*HotPlayMoviesRep, error)
}

type filmExtServiceClient struct {
	c           client.Client
	serviceName string
}

func NewFilmExtServiceClient(serviceName string, c client.Client) FilmExtServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &filmExtServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *filmExtServiceClient) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, opts ...client.CallOption) (*HotPlayMoviesRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmExtService.HotPlayMovies", in)
	out := new(HotPlayMoviesRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FilmExtService service

type FilmExtServiceHandler interface {
	// 获取最新上映的影片
	HotPlayMovies(context.Context, *HotPlayMoviesReq, *HotPlayMoviesRep) error
}

func RegisterFilmExtServiceHandler(s server.Server, hdlr FilmExtServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&FilmExtService{hdlr}, opts...))
}

type FilmExtService struct {
	FilmExtServiceHandler
}

func (h *FilmExtService) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, out *HotPlayMoviesRep) error {
	return h.FilmExtServiceHandler.HotPlayMovies(ctx, in, out)
}

func init() { proto.RegisterFile("film.ext.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x55, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0xad, 0xed, 0x7c, 0x89, 0xf9, 0xd8, 0x94, 0xf5, 0xa6, 0x6c, 0xba, 0x5d, 0x18, 0xc6, 0x1e,
	0x8c, 0x1e, 0x7c, 0x48, 0xce, 0x3d, 0xa4, 0x71, 0x82, 0x18, 0x48, 0xd2, 0x85, 0xbc, 0x40, 0xdb,
	0x23, 0x2d, 0x4f, 0x1c, 0xa2, 0x12, 0xa9, 0x92, 0xf4, 0x3a, 0xfe, 0x63, 0x3d, 0xf4, 0xd7, 0x15,
	0x33, 0x94, 0x64, 0xab, 0x96, 0x6f, 0x7c, 0x6f, 0xa8, 0x47, 0x72, 0xf8, 0xf4, 0xc8, 0xce, 0x5e,
	0x54, 0x9a, 0x0d, 0xe1, 0xcd, 0x0f, 0x73, 0x6b, 0xbc, 0xe1, 0xed, 0x7c, 0xda, 0x1f, 0xb2, 0xf3,
	0x07, 0xe3, 0x3f, 0xa7, 0x72, 0xf5, 0x64, 0xbe, 0x2a, 0x70, 0x31, 0xfc, 0xcd, 0x2f, 0xd9, 0x51,
	0x6a, 0x12, 0xe9, 0x95, 0xd1, 0xa2, 0xd5, 0x6b, 0x0d, 0x3a, 0x71, 0x85, 0xfb, 0x8f, 0x5b, 0xf3,
	0x73, 0xce, 0xd9, 0x9e, 0x07, 0xe7, 0x8b, 0xb9, 0x34, 0xe6, 0x9f, 0xd8, 0x41, 0x46, 0x13, 0x44,
	0xbb, 0xd7, 0x19, 0x1c, 0x5f, 0x9d, 0x0c, 0xf3, 0xe9, 0xf0, 0xc1, 0x78, 0xfa, 0x2a, 0x2e, 0x6a,
	0xfd, 0x7f, 0xf7, 0xd8, 0x51, 0x49, 0xf2, 0x0f, 0x2c, 0x92, 0x89, 0x37, 0xf6, 0x59, 0x66, 0x20,
	0x5a, 0xbd, 0xce, 0x20, 0x8a, 0xd7, 0x04, 0xff, 0xc4, 0x4e, 0x13, 0x93, 0x65, 0x46, 0x4f, 0x72,
	0x48, 0x94, 0x4c, 0x45, 0xbb, 0xd7, 0x1a, 0x44, 0x71, 0x9d, 0xe4, 0x7d, 0x76, 0x32, 0x53, 0x16,
	0x2a, 0x99, 0x0e, 0x4d, 0xaa, 0x71, 0xfc, 0x9c, 0x75, 0x54, 0x36, 0x17, 0x7b, 0x54, 0xc2, 0x21,
	0x1e, 0x40, 0xb9, 0xeb, 0x91, 0xd8, 0x0f, 0x07, 0xc0, 0x31, 0xbf, 0x60, 0x07, 0xca, 0x8d, 0x9e,
	0x6e, 0xfe, 0x10, 0x07, 0xc4, 0x16, 0x08, 0x9b, 0xa3, 0xdc, 0xbd, 0x4a, 0x3d, 0x58, 0x71, 0x18,
	0x9a, 0x53, 0x62, 0xde, 0x65, 0xfb, 0xca, 0x3d, 0x18, 0x2f, 0x8e, 0xa8, 0x10, 0x40, 0x50, 0x1a,
	0xa3, 0x52, 0x54, 0x2a, 0x8d, 0x2b, 0x25, 0x1c, 0x5d, 0x8f, 0x04, 0x2b, 0x95, 0x02, 0x0e, 0x4a,
	0xcf, 0xb0, 0x14, 0xc7, 0xa5, 0xd2, 0x33, 0x2c, 0x51, 0x29, 0x05, 0x3d, 0xf7, 0xaf, 0xe2, 0x24,
	0x28, 0x05, 0xc4, 0x05, 0x3b, 0xa4, 0x86, 0x8e, 0x67, 0xe2, 0x94, 0x0a, 0x25, 0xc4, 0x93, 0xd9,
	0x91, 0x5c, 0x89, 0xb3, 0x70, 0x32, 0x1c, 0xa3, 0x8a, 0x7d, 0x32, 0xda, 0xbf, 0x8a, 0x77, 0x41,
	0x25, 0x20, 0x5c, 0xd3, 0xfe, 0x09, 0xd2, 0x8a, 0xf3, 0xb0, 0x26, 0x01, 0xde, 0x63, 0xc7, 0x56,
	0x7a, 0xa5, 0xe7, 0xf7, 0x4a, 0xcb, 0x54, 0x7c, 0xdb, 0x6b, 0x0d, 0xda, 0xf1, 0x26, 0xc5, 0x4f,
	0x58, 0xcb, 0x0b, 0x4e, 0xdd, 0x6c, 0x79, 0xdc, 0x8b, 0x57, 0x3e, 0x85, 0x5b, 0x2d, 0xbe, 0x23,
	0xae, 0x84, 0x55, 0xe5, 0x4e, 0x8b, 0xee, 0x46, 0xe5, 0x4e, 0x93, 0x81, 0x56, 0x39, 0x88, 0xf7,
	0x44, 0xd3, 0x18, 0xd7, 0x5d, 0x4a, 0xed, 0x61, 0x76, 0x6b, 0x16, 0xda, 0x8b, 0x0b, 0xda, 0xd3,
	0x26, 0xd5, 0xff, 0xe7, 0x90, 0x9d, 0xdd, 0xab, 0x34, 0xbb, 0x49, 0xd3, 0x27, 0x70, 0x4e, 0xce,
	0x01, 0x85, 0x52, 0x33, 0x37, 0xe4, 0xc4, 0x28, 0xa6, 0x31, 0xb6, 0x19, 0x7d, 0xff, 0x68, 0xf4,
	0x9c, 0x3c, 0xd3, 0x89, 0x2b, 0x8c, 0x76, 0x51, 0x6e, 0x02, 0x29, 0x24, 0x7e, 0x02, 0xd2, 0x93,
	0x5d, 0x3a, 0x71, 0x8d, 0x43, 0x5b, 0xe2, 0xfc, 0xcf, 0x56, 0x25, 0x40, 0xa6, 0x69, 0xc7, 0x6b,
	0x82, 0xff, 0xcc, 0xce, 0x11, 0x4c, 0x12, 0x0b, 0xa0, 0x97, 0x56, 0xa1, 0x2d, 0xf6, 0x69, 0xf5,
	0x2d, 0x9e, 0x7f, 0x64, 0x0c, 0xdd, 0x0a, 0xda, 0x3f, 0x2f, 0xb2, 0xc2, 0x56, 0x1b, 0x4c, 0xb9,
	0x53, 0x32, 0xee, 0x21, 0x69, 0x54, 0x98, 0x5f, 0xb1, 0xae, 0x72, 0x93, 0x45, 0x9e, 0x1b, 0xeb,
	0xc7, 0x3a, 0x55, 0x1a, 0x7e, 0x97, 0x3e, 0x79, 0x2d, 0x9c, 0xd6, 0x58, 0x43, 0xbd, 0xc4, 0x82,
	0xf4, 0x70, 0xe3, 0xc9, 0x7a, 0x51, 0x5c, 0x61, 0xbc, 0x8c, 0xa9, 0x9a, 0x7f, 0xc1, 0xae, 0x07,
	0xef, 0x95, 0xb0, 0x3c, 0xef, 0xc8, 0xca, 0x4c, 0x92, 0xfd, 0xa2, 0x78, 0x4d, 0xf0, 0x01, 0x7b,
	0xb7, 0x70, 0x60, 0x6f, 0x92, 0x04, 0x9c, 0xfb, 0xa2, 0x32, 0x70, 0x85, 0x17, 0xff, 0x4f, 0xe3,
	0x0f, 0x8b, 0x9f, 0xfd, 0x6a, 0xde, 0xcc, 0xcb, 0x0b, 0xf6, 0xee, 0x94, 0x7a, 0x57, 0x27, 0xf1,
	0x06, 0x48, 0xbc, 0xf8, 0x41, 0xc9, 0xa8, 0x51, 0x5c, 0xe3, 0xf8, 0x90, 0x71, 0x14, 0x7f, 0x54,
	0x7f, 0x85, 0x83, 0x85, 0x65, 0x83, 0x79, 0x1b, 0x2a, 0x78, 0x27, 0xc8, 0xde, 0x86, 0xce, 0x86,
	0xd9, 0xc1, 0xd3, 0x5b, 0x7c, 0x11, 0x2b, 0xb9, 0xd4, 0xab, 0xb1, 0x73, 0x0b, 0x98, 0x91, 0xc1,
	0x43, 0xac, 0xac, 0x49, 0xec, 0x56, 0x82, 0x9e, 0xb3, 0xab, 0xc2, 0xe8, 0x25, 0xc4, 0xfd, 0x17,
	0x37, 0x38, 0x49, 0x8c, 0x05, 0xf2, 0x7c, 0x3b, 0xae, 0x71, 0x55, 0xbc, 0x74, 0x1b, 0xe3, 0xe5,
	0xfd, 0xce, 0x78, 0xb9, 0xd8, 0x15, 0x2f, 0xdf, 0x37, 0xc7, 0x8b, 0xd8, 0x19, 0x2f, 0x3f, 0xec,
	0x8a, 0x97, 0xcb, 0xcd, 0x78, 0x29, 0xc3, 0xe2, 0xc7, 0xc6, 0xb0, 0xf8, 0xd0, 0x1c, 0x16, 0x3f,
	0x6d, 0x86, 0xc5, 0x56, 0x48, 0x7f, 0x6c, 0x08, 0xe9, 0xab, 0xdf, 0xc2, 0x7f, 0x7b, 0xf7, 0xe6,
	0x27, 0x60, 0xbf, 0xa2, 0x0b, 0x7e, 0x61, 0xa7, 0xb5, 0x57, 0x85, 0x77, 0x8b, 0xe7, 0xa2, 0xf6,
	0x30, 0x5d, 0x36, 0xb1, 0x79, 0xff, 0x9b, 0xe9, 0x01, 0xbd, 0x67, 0xd7, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x34, 0xf3, 0x45, 0x9d, 0xe1, 0x06, 0x00, 0x00,
}
