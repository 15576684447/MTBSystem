// Code generated by protoc-gen-go. DO NOT EDIT.
// source: film.ext.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HotPlayMoviesReq struct {
	Location int64 `protobuf:"varint,1,opt,name=location" json:"location,omitempty"`
}

func (m *HotPlayMoviesReq) Reset()                    { *m = HotPlayMoviesReq{} }
func (m *HotPlayMoviesReq) String() string            { return proto.CompactTextString(m) }
func (*HotPlayMoviesReq) ProtoMessage()               {}
func (*HotPlayMoviesReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *HotPlayMoviesReq) GetLocation() int64 {
	if m != nil {
		return m.Location
	}
	return 0
}

type HotPlayMoviesRep struct {
	Movies []*Movie `protobuf:"bytes,1,rep,name=movies" json:"movies,omitempty"`
}

func (m *HotPlayMoviesRep) Reset()                    { *m = HotPlayMoviesRep{} }
func (m *HotPlayMoviesRep) String() string            { return proto.CompactTextString(m) }
func (*HotPlayMoviesRep) ProtoMessage()               {}
func (*HotPlayMoviesRep) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *HotPlayMoviesRep) GetMovies() []*Movie {
	if m != nil {
		return m.Movies
	}
	return nil
}

type Movie struct {
	Img     string `protobuf:"bytes,1,opt,name=img" json:"img,omitempty"`
	MovieId int64  `protobuf:"varint,2,opt,name=movieId" json:"movieId,omitempty"`
	TitleCn string `protobuf:"bytes,3,opt,name=titleCn" json:"titleCn,omitempty"`
}

func (m *Movie) Reset()                    { *m = Movie{} }
func (m *Movie) String() string            { return proto.CompactTextString(m) }
func (*Movie) ProtoMessage()               {}
func (*Movie) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Movie) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *Movie) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

func (m *Movie) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

type HotMovie struct {
	ActorName     []string `protobuf:"bytes,1,rep,name=actorName" json:"actorName,omitempty"`
	CommonSpecial string   `protobuf:"bytes,2,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
	DirectorName  string   `protobuf:"bytes,3,opt,name=directorName" json:"directorName,omitempty"`
	Img           string   `protobuf:"bytes,4,opt,name=img" json:"img,omitempty"`
	Is3D          int64    `protobuf:"varint,5,opt,name=is3D" json:"is3D,omitempty"`
	IsDMAX        int64    `protobuf:"varint,6,opt,name=isDMAX" json:"isDMAX,omitempty"`
	IsFilter      int64    `protobuf:"varint,7,opt,name=isFilter" json:"isFilter,omitempty"`
	IsHot         int64    `protobuf:"varint,8,opt,name=isHot" json:"isHot,omitempty"`
	IsIMAX        int64    `protobuf:"varint,9,opt,name=isIMAX" json:"isIMAX,omitempty"`
	IsIMAX3D      int64    `protobuf:"varint,10,opt,name=isIMAX3D" json:"isIMAX3D,omitempty"`
	IsNew         int64    `protobuf:"varint,11,opt,name=isNew" json:"isNew,omitempty"`
	Length        int64    `protobuf:"varint,12,opt,name=length" json:"length,omitempty"`
	MovieId       int64    `protobuf:"varint,13,opt,name=movieId" json:"movieId,omitempty"`
	RDay          int64    `protobuf:"varint,14,opt,name=rDay" json:"rDay,omitempty"`
	RMonth        int64    `protobuf:"varint,15,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear         int64    `protobuf:"varint,16,opt,name=rYear" json:"rYear,omitempty"`
	RatingFinal   float32  `protobuf:"fixed32,17,opt,name=ratingFinal" json:"ratingFinal,omitempty"`
	T             string   `protobuf:"bytes,18,opt,name=t" json:"t,omitempty"`
	TitleCn       string   `protobuf:"bytes,19,opt,name=titleCn" json:"titleCn,omitempty"`
	TitleEn       string   `protobuf:"bytes,20,opt,name=titleEn" json:"titleEn,omitempty"`
	Type          string   `protobuf:"bytes,21,opt,name=type" json:"type,omitempty"`
	WantedCount   int64    `protobuf:"varint,22,opt,name=wantedCount" json:"wantedCount,omitempty"`
}

func (m *HotMovie) Reset()                    { *m = HotMovie{} }
func (m *HotMovie) String() string            { return proto.CompactTextString(m) }
func (*HotMovie) ProtoMessage()               {}
func (*HotMovie) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *HotMovie) GetActorName() []string {
	if m != nil {
		return m.ActorName
	}
	return nil
}

func (m *HotMovie) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func (m *HotMovie) GetDirectorName() string {
	if m != nil {
		return m.DirectorName
	}
	return ""
}

func (m *HotMovie) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *HotMovie) GetIs3D() int64 {
	if m != nil {
		return m.Is3D
	}
	return 0
}

func (m *HotMovie) GetIsDMAX() int64 {
	if m != nil {
		return m.IsDMAX
	}
	return 0
}

func (m *HotMovie) GetIsFilter() int64 {
	if m != nil {
		return m.IsFilter
	}
	return 0
}

func (m *HotMovie) GetIsHot() int64 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *HotMovie) GetIsIMAX() int64 {
	if m != nil {
		return m.IsIMAX
	}
	return 0
}

func (m *HotMovie) GetIsIMAX3D() int64 {
	if m != nil {
		return m.IsIMAX3D
	}
	return 0
}

func (m *HotMovie) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *HotMovie) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *HotMovie) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

func (m *HotMovie) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *HotMovie) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *HotMovie) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *HotMovie) GetRatingFinal() float32 {
	if m != nil {
		return m.RatingFinal
	}
	return 0
}

func (m *HotMovie) GetT() string {
	if m != nil {
		return m.T
	}
	return ""
}

func (m *HotMovie) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

func (m *HotMovie) GetTitleEn() string {
	if m != nil {
		return m.TitleEn
	}
	return ""
}

func (m *HotMovie) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HotMovie) GetWantedCount() int64 {
	if m != nil {
		return m.WantedCount
	}
	return 0
}

type FilmAllMessage struct {
	Logo                 string  `protobuf:"bytes,1,opt,name=logo" json:"logo,omitempty"`
	FilmLong             int64   `protobuf:"varint,2,opt,name=filmLong" json:"filmLong,omitempty"`
	IsSelectSeat         int64   `protobuf:"varint,3,opt,name=isSelectSeat" json:"isSelectSeat,omitempty"`
	FilmPrice            float32 `protobuf:"fixed32,4,opt,name=filmPrice" json:"filmPrice,omitempty"`
	FilmScreenwriter     string  `protobuf:"bytes,5,opt,name=filmScreenwriter" json:"filmScreenwriter,omitempty"`
	CommentNum           int64   `protobuf:"varint,6,opt,name=commentNum" json:"commentNum,omitempty"`
	FilmName             string  `protobuf:"bytes,7,opt,name=filmName" json:"filmName,omitempty"`
	IsSupportInlineWatch int64   `protobuf:"varint,8,opt,name=isSupportInlineWatch" json:"isSupportInlineWatch,omitempty"`
	CreateAt             string  `protobuf:"bytes,9,opt,name=createAt" json:"createAt,omitempty"`
	BigType              int64   `protobuf:"varint,10,opt,name=bigType" json:"bigType,omitempty"`
	FilmDrama            string  `protobuf:"bytes,11,opt,name=filmDrama" json:"filmDrama,omitempty"`
	UserAccessTimes      int64   `protobuf:"varint,12,opt,name=userAccessTimes" json:"userAccessTimes,omitempty"`
	FilmBoxoffice        float32 `protobuf:"fixed32,13,opt,name=filmBoxoffice" json:"filmBoxoffice,omitempty"`
	FilmDirector         string  `protobuf:"bytes,14,opt,name=filmDirector" json:"filmDirector,omitempty"`
	UserLikeWatchTimes   int64   `protobuf:"varint,15,opt,name=userLikeWatchTimes" json:"userLikeWatchTimes,omitempty"`
	UserCommentTimes     int64   `protobuf:"varint,16,opt,name=userCommentTimes" json:"userCommentTimes,omitempty"`
	CompanyIssued        string  `protobuf:"bytes,17,opt,name=companyIssued" json:"companyIssued,omitempty"`
	Country              string  `protobuf:"bytes,18,opt,name=country" json:"country,omitempty"`
	CommentScore         float32 `protobuf:"fixed32,19,opt,name=commentScore" json:"commentScore,omitempty"`
	Is3D                 int64   `protobuf:"varint,20,opt,name=is3D" json:"is3D,omitempty"`
	IsDMAX               int64   `protobuf:"varint,21,opt,name=isDMAX" json:"isDMAX,omitempty"`
	IsFilter             int64   `protobuf:"varint,22,opt,name=isFilter" json:"isFilter,omitempty"`
	IsHot                int64   `protobuf:"varint,23,opt,name=isHot" json:"isHot,omitempty"`
	IsIMAX               int64   `protobuf:"varint,24,opt,name=isIMAX" json:"isIMAX,omitempty"`
	IsIMAX3D             int64   `protobuf:"varint,25,opt,name=isIMAX3D" json:"isIMAX3D,omitempty"`
	IsNew                int64   `protobuf:"varint,26,opt,name=isNew" json:"isNew,omitempty"`
	RDay                 int64   `protobuf:"varint,27,opt,name=rDay" json:"rDay,omitempty"`
	RMonth               int64   `protobuf:"varint,28,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear                int64   `protobuf:"varint,29,opt,name=rYear" json:"rYear,omitempty"`
	CommonSpecial        string  `protobuf:"bytes,30,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
}

func (m *FilmAllMessage) Reset()                    { *m = FilmAllMessage{} }
func (m *FilmAllMessage) String() string            { return proto.CompactTextString(m) }
func (*FilmAllMessage) ProtoMessage()               {}
func (*FilmAllMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *FilmAllMessage) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *FilmAllMessage) GetFilmLong() int64 {
	if m != nil {
		return m.FilmLong
	}
	return 0
}

func (m *FilmAllMessage) GetIsSelectSeat() int64 {
	if m != nil {
		return m.IsSelectSeat
	}
	return 0
}

func (m *FilmAllMessage) GetFilmPrice() float32 {
	if m != nil {
		return m.FilmPrice
	}
	return 0
}

func (m *FilmAllMessage) GetFilmScreenwriter() string {
	if m != nil {
		return m.FilmScreenwriter
	}
	return ""
}

func (m *FilmAllMessage) GetCommentNum() int64 {
	if m != nil {
		return m.CommentNum
	}
	return 0
}

func (m *FilmAllMessage) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *FilmAllMessage) GetIsSupportInlineWatch() int64 {
	if m != nil {
		return m.IsSupportInlineWatch
	}
	return 0
}

func (m *FilmAllMessage) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *FilmAllMessage) GetBigType() int64 {
	if m != nil {
		return m.BigType
	}
	return 0
}

func (m *FilmAllMessage) GetFilmDrama() string {
	if m != nil {
		return m.FilmDrama
	}
	return ""
}

func (m *FilmAllMessage) GetUserAccessTimes() int64 {
	if m != nil {
		return m.UserAccessTimes
	}
	return 0
}

func (m *FilmAllMessage) GetFilmBoxoffice() float32 {
	if m != nil {
		return m.FilmBoxoffice
	}
	return 0
}

func (m *FilmAllMessage) GetFilmDirector() string {
	if m != nil {
		return m.FilmDirector
	}
	return ""
}

func (m *FilmAllMessage) GetUserLikeWatchTimes() int64 {
	if m != nil {
		return m.UserLikeWatchTimes
	}
	return 0
}

func (m *FilmAllMessage) GetUserCommentTimes() int64 {
	if m != nil {
		return m.UserCommentTimes
	}
	return 0
}

func (m *FilmAllMessage) GetCompanyIssued() string {
	if m != nil {
		return m.CompanyIssued
	}
	return ""
}

func (m *FilmAllMessage) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *FilmAllMessage) GetCommentScore() float32 {
	if m != nil {
		return m.CommentScore
	}
	return 0
}

func (m *FilmAllMessage) GetIs3D() int64 {
	if m != nil {
		return m.Is3D
	}
	return 0
}

func (m *FilmAllMessage) GetIsDMAX() int64 {
	if m != nil {
		return m.IsDMAX
	}
	return 0
}

func (m *FilmAllMessage) GetIsFilter() int64 {
	if m != nil {
		return m.IsFilter
	}
	return 0
}

func (m *FilmAllMessage) GetIsHot() int64 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *FilmAllMessage) GetIsIMAX() int64 {
	if m != nil {
		return m.IsIMAX
	}
	return 0
}

func (m *FilmAllMessage) GetIsIMAX3D() int64 {
	if m != nil {
		return m.IsIMAX3D
	}
	return 0
}

func (m *FilmAllMessage) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *FilmAllMessage) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *FilmAllMessage) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *FilmAllMessage) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *FilmAllMessage) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

type MovieDetailReq struct {
	LocationId int64 `protobuf:"varint,1,opt,name=locationId" json:"locationId,omitempty"`
	MovieId    int64 `protobuf:"varint,2,opt,name=movieId" json:"movieId,omitempty"`
}

func (m *MovieDetailReq) Reset()                    { *m = MovieDetailReq{} }
func (m *MovieDetailReq) String() string            { return proto.CompactTextString(m) }
func (*MovieDetailReq) ProtoMessage()               {}
func (*MovieDetailReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *MovieDetailReq) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

func (m *MovieDetailReq) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

type MovieDetailRep struct {
	Image         string   `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	TitleCn       string   `protobuf:"bytes,2,opt,name=titleCn" json:"titleCn,omitempty"`
	TitleEn       string   `protobuf:"bytes,3,opt,name=titleEn" json:"titleEn,omitempty"`
	Rating        float32  `protobuf:"fixed32,4,opt,name=rating" json:"rating,omitempty"`
	Year          int64    `protobuf:"varint,5,opt,name=year" json:"year,omitempty"`
	Content       string   `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Type          []string `protobuf:"bytes,7,rep,name=type" json:"type,omitempty"`
	RunTime       int64    `protobuf:"varint,8,opt,name=runTime" json:"runTime,omitempty"`
	CommonSpecial string   `protobuf:"bytes,9,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
	Director      string   `protobuf:"bytes,10,opt,name=director" json:"director,omitempty"`
	Release       *Release `protobuf:"bytes,11,opt,name=release" json:"release,omitempty"`
}

func (m *MovieDetailRep) Reset()                    { *m = MovieDetailRep{} }
func (m *MovieDetailRep) String() string            { return proto.CompactTextString(m) }
func (*MovieDetailRep) ProtoMessage()               {}
func (*MovieDetailRep) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *MovieDetailRep) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MovieDetailRep) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

func (m *MovieDetailRep) GetTitleEn() string {
	if m != nil {
		return m.TitleEn
	}
	return ""
}

func (m *MovieDetailRep) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *MovieDetailRep) GetYear() int64 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *MovieDetailRep) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *MovieDetailRep) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *MovieDetailRep) GetRunTime() int64 {
	if m != nil {
		return m.RunTime
	}
	return 0
}

func (m *MovieDetailRep) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func (m *MovieDetailRep) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

func (m *MovieDetailRep) GetRelease() *Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type Release struct {
	Location string `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Date     string `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
}

func (m *Release) Reset()                    { *m = Release{} }
func (m *Release) String() string            { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()               {}
func (*Release) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Release) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Release) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type MovieCreditsWithTypesReq struct {
	MovieId int64 `protobuf:"varint,1,opt,name=MovieId" json:"MovieId,omitempty"`
}

func (m *MovieCreditsWithTypesReq) Reset()                    { *m = MovieCreditsWithTypesReq{} }
func (m *MovieCreditsWithTypesReq) String() string            { return proto.CompactTextString(m) }
func (*MovieCreditsWithTypesReq) ProtoMessage()               {}
func (*MovieCreditsWithTypesReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *MovieCreditsWithTypesReq) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

type MovieCreditsWithTypesRep struct {
	Types []*Type `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (m *MovieCreditsWithTypesRep) Reset()                    { *m = MovieCreditsWithTypesRep{} }
func (m *MovieCreditsWithTypesRep) String() string            { return proto.CompactTextString(m) }
func (*MovieCreditsWithTypesRep) ProtoMessage()               {}
func (*MovieCreditsWithTypesRep) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *MovieCreditsWithTypesRep) GetTypes() []*Type {
	if m != nil {
		return m.Types
	}
	return nil
}

type Type struct {
	TypeName   string     `protobuf:"bytes,1,opt,name=typeName" json:"typeName,omitempty"`
	TypeNameEc string     `protobuf:"bytes,2,opt,name=typeNameEc" json:"typeNameEc,omitempty"`
	Persons    []*Persons `protobuf:"bytes,3,rep,name=persons" json:"persons,omitempty"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *Type) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *Type) GetTypeNameEc() string {
	if m != nil {
		return m.TypeNameEc
	}
	return ""
}

func (m *Type) GetPersons() []*Persons {
	if m != nil {
		return m.Persons
	}
	return nil
}

type Persons struct {
	Image     string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NameEn    string `protobuf:"bytes,3,opt,name=nameEn" json:"nameEn,omitempty"`
	RoleCover string `protobuf:"bytes,4,opt,name=roleCover" json:"roleCover,omitempty"`
	Personate string `protobuf:"bytes,5,opt,name=personate" json:"personate,omitempty"`
}

func (m *Persons) Reset()                    { *m = Persons{} }
func (m *Persons) String() string            { return proto.CompactTextString(m) }
func (*Persons) ProtoMessage()               {}
func (*Persons) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *Persons) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Persons) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Persons) GetNameEn() string {
	if m != nil {
		return m.NameEn
	}
	return ""
}

func (m *Persons) GetRoleCover() string {
	if m != nil {
		return m.RoleCover
	}
	return ""
}

func (m *Persons) GetPersonate() string {
	if m != nil {
		return m.Personate
	}
	return ""
}

type ImageAllReq struct {
	MovieId int64 `protobuf:"varint,2,opt,name=movieId" json:"movieId,omitempty"`
}

func (m *ImageAllReq) Reset()                    { *m = ImageAllReq{} }
func (m *ImageAllReq) String() string            { return proto.CompactTextString(m) }
func (*ImageAllReq) ProtoMessage()               {}
func (*ImageAllReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *ImageAllReq) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

type ImageAllRep struct {
	Images []*Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *ImageAllRep) Reset()                    { *m = ImageAllRep{} }
func (m *ImageAllRep) String() string            { return proto.CompactTextString(m) }
func (*ImageAllRep) ProtoMessage()               {}
func (*ImageAllRep) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *ImageAllRep) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type Image struct {
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *Image) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type LocationMoviesReq struct {
}

func (m *LocationMoviesReq) Reset()                    { *m = LocationMoviesReq{} }
func (m *LocationMoviesReq) String() string            { return proto.CompactTextString(m) }
func (*LocationMoviesReq) ProtoMessage()               {}
func (*LocationMoviesReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

type LocationMoviesRep struct {
	Movies []*Movie `protobuf:"bytes,1,rep,name=movies" json:"movies,omitempty"`
}

func (m *LocationMoviesRep) Reset()                    { *m = LocationMoviesRep{} }
func (m *LocationMoviesRep) String() string            { return proto.CompactTextString(m) }
func (*LocationMoviesRep) ProtoMessage()               {}
func (*LocationMoviesRep) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *LocationMoviesRep) GetMovies() []*Movie {
	if m != nil {
		return m.Movies
	}
	return nil
}

type MovieComingNewReq struct {
}

func (m *MovieComingNewReq) Reset()                    { *m = MovieComingNewReq{} }
func (m *MovieComingNewReq) String() string            { return proto.CompactTextString(m) }
func (*MovieComingNewReq) ProtoMessage()               {}
func (*MovieComingNewReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

type MovieComingNewRep struct {
	Movies []*Movie `protobuf:"bytes,1,rep,name=movies" json:"movies,omitempty"`
}

func (m *MovieComingNewRep) Reset()                    { *m = MovieComingNewRep{} }
func (m *MovieComingNewRep) String() string            { return proto.CompactTextString(m) }
func (*MovieComingNewRep) ProtoMessage()               {}
func (*MovieComingNewRep) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *MovieComingNewRep) GetMovies() []*Movie {
	if m != nil {
		return m.Movies
	}
	return nil
}

type SearchRep struct {
	Subjects []*SearchMovie `protobuf:"bytes,1,rep,name=subjects" json:"subjects,omitempty"`
	Total    int64          `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *SearchRep) Reset()                    { *m = SearchRep{} }
func (m *SearchRep) String() string            { return proto.CompactTextString(m) }
func (*SearchRep) ProtoMessage()               {}
func (*SearchRep) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *SearchRep) GetSubjects() []*SearchMovie {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *SearchRep) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type SearchReq struct {
	Q string `protobuf:"bytes,1,opt,name=q" json:"q,omitempty"`
}

func (m *SearchReq) Reset()                    { *m = SearchReq{} }
func (m *SearchReq) String() string            { return proto.CompactTextString(m) }
func (*SearchReq) ProtoMessage()               {}
func (*SearchReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *SearchReq) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

type SearchMovie struct {
	Title  string    `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Id     string    `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Image  *Images   `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Genres []*Genres `protobuf:"bytes,4,rep,name=genres" json:"genres,omitempty"`
	Year   string    `protobuf:"bytes,5,opt,name=year" json:"year,omitempty"`
	Rating *Rating   `protobuf:"bytes,6,opt,name=rating" json:"rating,omitempty"`
}

func (m *SearchMovie) Reset()                    { *m = SearchMovie{} }
func (m *SearchMovie) String() string            { return proto.CompactTextString(m) }
func (*SearchMovie) ProtoMessage()               {}
func (*SearchMovie) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *SearchMovie) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SearchMovie) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SearchMovie) GetImage() *Images {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *SearchMovie) GetGenres() []*Genres {
	if m != nil {
		return m.Genres
	}
	return nil
}

func (m *SearchMovie) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *SearchMovie) GetRating() *Rating {
	if m != nil {
		return m.Rating
	}
	return nil
}

type Genres struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *Genres) Reset()                    { *m = Genres{} }
func (m *Genres) String() string            { return proto.CompactTextString(m) }
func (*Genres) ProtoMessage()               {}
func (*Genres) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *Genres) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Rating struct {
	Average float32 `protobuf:"fixed32,1,opt,name=average" json:"average,omitempty"`
}

func (m *Rating) Reset()                    { *m = Rating{} }
func (m *Rating) String() string            { return proto.CompactTextString(m) }
func (*Rating) ProtoMessage()               {}
func (*Rating) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *Rating) GetAverage() float32 {
	if m != nil {
		return m.Average
	}
	return 0
}

type Images struct {
	Small string `protobuf:"bytes,1,opt,name=small" json:"small,omitempty"`
}

func (m *Images) Reset()                    { *m = Images{} }
func (m *Images) String() string            { return proto.CompactTextString(m) }
func (*Images) ProtoMessage()               {}
func (*Images) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *Images) GetSmall() string {
	if m != nil {
		return m.Small
	}
	return ""
}

type GetFilmsByCidReq struct {
	CinemaId int64 `protobuf:"varint,1,opt,name=cinemaId" json:"cinemaId,omitempty"`
}

func (m *GetFilmsByCidReq) Reset()                    { *m = GetFilmsByCidReq{} }
func (m *GetFilmsByCidReq) String() string            { return proto.CompactTextString(m) }
func (*GetFilmsByCidReq) ProtoMessage()               {}
func (*GetFilmsByCidReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *GetFilmsByCidReq) GetCinemaId() int64 {
	if m != nil {
		return m.CinemaId
	}
	return 0
}

type GetFilmsByCidRsp struct {
	Movies []*Movie `protobuf:"bytes,1,rep,name=movies" json:"movies,omitempty"`
}

func (m *GetFilmsByCidRsp) Reset()                    { *m = GetFilmsByCidRsp{} }
func (m *GetFilmsByCidRsp) String() string            { return proto.CompactTextString(m) }
func (*GetFilmsByCidRsp) ProtoMessage()               {}
func (*GetFilmsByCidRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *GetFilmsByCidRsp) GetMovies() []*Movie {
	if m != nil {
		return m.Movies
	}
	return nil
}

func init() {
	proto.RegisterType((*HotPlayMoviesReq)(nil), "pb.HotPlayMoviesReq")
	proto.RegisterType((*HotPlayMoviesRep)(nil), "pb.HotPlayMoviesRep")
	proto.RegisterType((*Movie)(nil), "pb.Movie")
	proto.RegisterType((*HotMovie)(nil), "pb.HotMovie")
	proto.RegisterType((*FilmAllMessage)(nil), "pb.FilmAllMessage")
	proto.RegisterType((*MovieDetailReq)(nil), "pb.MovieDetailReq")
	proto.RegisterType((*MovieDetailRep)(nil), "pb.MovieDetailRep")
	proto.RegisterType((*Release)(nil), "pb.Release")
	proto.RegisterType((*MovieCreditsWithTypesReq)(nil), "pb.MovieCreditsWithTypesReq")
	proto.RegisterType((*MovieCreditsWithTypesRep)(nil), "pb.MovieCreditsWithTypesRep")
	proto.RegisterType((*Type)(nil), "pb.Type")
	proto.RegisterType((*Persons)(nil), "pb.Persons")
	proto.RegisterType((*ImageAllReq)(nil), "pb.ImageAllReq")
	proto.RegisterType((*ImageAllRep)(nil), "pb.ImageAllRep")
	proto.RegisterType((*Image)(nil), "pb.Image")
	proto.RegisterType((*LocationMoviesReq)(nil), "pb.LocationMoviesReq")
	proto.RegisterType((*LocationMoviesRep)(nil), "pb.LocationMoviesRep")
	proto.RegisterType((*MovieComingNewReq)(nil), "pb.MovieComingNewReq")
	proto.RegisterType((*MovieComingNewRep)(nil), "pb.MovieComingNewRep")
	proto.RegisterType((*SearchRep)(nil), "pb.SearchRep")
	proto.RegisterType((*SearchReq)(nil), "pb.SearchReq")
	proto.RegisterType((*SearchMovie)(nil), "pb.SearchMovie")
	proto.RegisterType((*Genres)(nil), "pb.Genres")
	proto.RegisterType((*Rating)(nil), "pb.Rating")
	proto.RegisterType((*Images)(nil), "pb.Images")
	proto.RegisterType((*GetFilmsByCidReq)(nil), "pb.GetFilmsByCidReq")
	proto.RegisterType((*GetFilmsByCidRsp)(nil), "pb.GetFilmsByCidRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FilmServiceExt service

type FilmServiceExtClient interface {
	// 获取正在售票的影片
	HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, opts ...client.CallOption) (*HotPlayMoviesRep, error)
	// 电影详情
	MovieDetail(ctx context.Context, in *MovieDetailReq, opts ...client.CallOption) (*MovieDetailRep, error)
	// 获取导演与演员信息
	MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, opts ...client.CallOption) (*MovieCreditsWithTypesRep, error)
	// 获取海报信息
	ImageAll(ctx context.Context, in *ImageAllReq, opts ...client.CallOption) (*ImageAllRep, error)
	// 正在热映的影片
	LocationMovies(ctx context.Context, in *LocationMoviesReq, opts ...client.CallOption) (*LocationMoviesRep, error)
	// 即将上映的影片
	MovieComingNew(ctx context.Context, in *MovieComingNewReq, opts ...client.CallOption) (*MovieComingNewRep, error)
	// 图片搜索
	Search(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchRep, error)
	// 根据影院id获取正在销售的影片信息
	GetFilmsByCid(ctx context.Context, in *GetFilmsByCidReq, opts ...client.CallOption) (*GetFilmsByCidRsp, error)
}

type filmServiceExtClient struct {
	c           client.Client
	serviceName string
}

func NewFilmServiceExtClient(serviceName string, c client.Client) FilmServiceExtClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &filmServiceExtClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *filmServiceExtClient) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, opts ...client.CallOption) (*HotPlayMoviesRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.HotPlayMovies", in)
	out := new(HotPlayMoviesRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) MovieDetail(ctx context.Context, in *MovieDetailReq, opts ...client.CallOption) (*MovieDetailRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.MovieDetail", in)
	out := new(MovieDetailRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, opts ...client.CallOption) (*MovieCreditsWithTypesRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.MovieCreditsWithTypes", in)
	out := new(MovieCreditsWithTypesRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) ImageAll(ctx context.Context, in *ImageAllReq, opts ...client.CallOption) (*ImageAllRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.ImageAll", in)
	out := new(ImageAllRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) LocationMovies(ctx context.Context, in *LocationMoviesReq, opts ...client.CallOption) (*LocationMoviesRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.LocationMovies", in)
	out := new(LocationMoviesRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) MovieComingNew(ctx context.Context, in *MovieComingNewReq, opts ...client.CallOption) (*MovieComingNewRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.MovieComingNew", in)
	out := new(MovieComingNewRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) Search(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchRep, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.Search", in)
	out := new(SearchRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmServiceExtClient) GetFilmsByCid(ctx context.Context, in *GetFilmsByCidReq, opts ...client.CallOption) (*GetFilmsByCidRsp, error) {
	req := c.c.NewRequest(c.serviceName, "FilmServiceExt.GetFilmsByCid", in)
	out := new(GetFilmsByCidRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FilmServiceExt service

type FilmServiceExtHandler interface {
	// 获取正在售票的影片
	HotPlayMovies(context.Context, *HotPlayMoviesReq, *HotPlayMoviesRep) error
	// 电影详情
	MovieDetail(context.Context, *MovieDetailReq, *MovieDetailRep) error
	// 获取导演与演员信息
	MovieCreditsWithTypes(context.Context, *MovieCreditsWithTypesReq, *MovieCreditsWithTypesRep) error
	// 获取海报信息
	ImageAll(context.Context, *ImageAllReq, *ImageAllRep) error
	// 正在热映的影片
	LocationMovies(context.Context, *LocationMoviesReq, *LocationMoviesRep) error
	// 即将上映的影片
	MovieComingNew(context.Context, *MovieComingNewReq, *MovieComingNewRep) error
	// 图片搜索
	Search(context.Context, *SearchReq, *SearchRep) error
	// 根据影院id获取正在销售的影片信息
	GetFilmsByCid(context.Context, *GetFilmsByCidReq, *GetFilmsByCidRsp) error
}

func RegisterFilmServiceExtHandler(s server.Server, hdlr FilmServiceExtHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&FilmServiceExt{hdlr}, opts...))
}

type FilmServiceExt struct {
	FilmServiceExtHandler
}

func (h *FilmServiceExt) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq, out *HotPlayMoviesRep) error {
	return h.FilmServiceExtHandler.HotPlayMovies(ctx, in, out)
}

func (h *FilmServiceExt) MovieDetail(ctx context.Context, in *MovieDetailReq, out *MovieDetailRep) error {
	return h.FilmServiceExtHandler.MovieDetail(ctx, in, out)
}

func (h *FilmServiceExt) MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq, out *MovieCreditsWithTypesRep) error {
	return h.FilmServiceExtHandler.MovieCreditsWithTypes(ctx, in, out)
}

func (h *FilmServiceExt) ImageAll(ctx context.Context, in *ImageAllReq, out *ImageAllRep) error {
	return h.FilmServiceExtHandler.ImageAll(ctx, in, out)
}

func (h *FilmServiceExt) LocationMovies(ctx context.Context, in *LocationMoviesReq, out *LocationMoviesRep) error {
	return h.FilmServiceExtHandler.LocationMovies(ctx, in, out)
}

func (h *FilmServiceExt) MovieComingNew(ctx context.Context, in *MovieComingNewReq, out *MovieComingNewRep) error {
	return h.FilmServiceExtHandler.MovieComingNew(ctx, in, out)
}

func (h *FilmServiceExt) Search(ctx context.Context, in *SearchReq, out *SearchRep) error {
	return h.FilmServiceExtHandler.Search(ctx, in, out)
}

func (h *FilmServiceExt) GetFilmsByCid(ctx context.Context, in *GetFilmsByCidReq, out *GetFilmsByCidRsp) error {
	return h.FilmServiceExtHandler.GetFilmsByCid(ctx, in, out)
}

func init() { proto.RegisterFile("film.ext.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xdb, 0x6e, 0x1b, 0x37,
	0x10, 0x8d, 0x2e, 0x96, 0xb4, 0xa3, 0xf8, 0x12, 0xc6, 0x4e, 0x37, 0xaa, 0x63, 0xb8, 0x8b, 0x16,
	0x35, 0x5a, 0x40, 0x28, 0x9c, 0x5e, 0xd0, 0x02, 0x01, 0xea, 0xd8, 0x4e, 0xa2, 0x22, 0x36, 0x82,
	0x55, 0x8a, 0xb4, 0x8f, 0xeb, 0x15, 0x23, 0xb3, 0xdd, 0x9b, 0xb9, 0x94, 0x1d, 0x7d, 0x41, 0xbf,
	0xa7, 0x2f, 0x2d, 0xd0, 0x6f, 0xeb, 0x43, 0x31, 0x43, 0x72, 0xb5, 0x6b, 0xad, 0x0a, 0x3f, 0x89,
	0x73, 0x38, 0x3b, 0x1c, 0x0e, 0xcf, 0x1c, 0x52, 0xb0, 0xf1, 0x5e, 0x44, 0xf1, 0x90, 0x7f, 0x50,
	0xc3, 0x4c, 0xa6, 0x2a, 0x65, 0xcd, 0xec, 0xc2, 0x1b, 0xc2, 0xd6, 0xab, 0x54, 0xbd, 0x89, 0x82,
	0xf9, 0x59, 0x7a, 0x2d, 0x78, 0xee, 0xf3, 0x2b, 0x36, 0x80, 0x5e, 0x94, 0x86, 0x81, 0x12, 0x69,
	0xe2, 0x36, 0xf6, 0x1b, 0x07, 0x2d, 0xbf, 0xb0, 0xbd, 0x6f, 0x96, 0xfc, 0x33, 0xf6, 0x09, 0x74,
	0x62, 0x32, 0xdc, 0xc6, 0x7e, 0xeb, 0xa0, 0x7f, 0xe8, 0x0c, 0xb3, 0x8b, 0x21, 0x4d, 0xfb, 0x66,
	0xc2, 0x3b, 0x83, 0x35, 0x02, 0xd8, 0x16, 0xb4, 0x44, 0x3c, 0xa5, 0xb0, 0x8e, 0x8f, 0x43, 0xe6,
	0x42, 0x97, 0x9c, 0x46, 0x13, 0xb7, 0x49, 0x8b, 0x59, 0x13, 0x67, 0x94, 0x50, 0x11, 0x3f, 0x4e,
	0xdc, 0x16, 0xf9, 0x5b, 0xd3, 0xfb, 0xa7, 0x0d, 0xbd, 0x57, 0xa9, 0xd2, 0x21, 0x77, 0xc1, 0x09,
	0x42, 0x95, 0xca, 0xf3, 0x20, 0xe6, 0x94, 0x81, 0xe3, 0x2f, 0x00, 0xf6, 0x29, 0xac, 0x87, 0x69,
	0x1c, 0xa7, 0xc9, 0x38, 0xe3, 0xa1, 0x08, 0x22, 0x5a, 0xc4, 0xf1, 0xab, 0x20, 0xf3, 0xe0, 0xfe,
	0x44, 0x48, 0x5e, 0x84, 0xd1, 0xeb, 0x55, 0x30, 0x9b, 0x7a, 0x7b, 0x91, 0x3a, 0x83, 0xb6, 0xc8,
	0x9f, 0x9e, 0xb8, 0x6b, 0x94, 0x37, 0x8d, 0xd9, 0x23, 0xe8, 0x88, 0xfc, 0xe4, 0xec, 0xe8, 0x17,
	0xb7, 0x43, 0xa8, 0xb1, 0xb0, 0xa8, 0x22, 0x7f, 0x21, 0x22, 0xc5, 0xa5, 0xdb, 0xd5, 0x45, 0xb5,
	0x36, 0xdb, 0x86, 0x35, 0x91, 0xbf, 0x4a, 0x95, 0xdb, 0xa3, 0x09, 0x6d, 0xe8, 0x48, 0x23, 0x8c,
	0xe4, 0xd8, 0x48, 0xa3, 0x22, 0x12, 0x8e, 0x9e, 0x9e, 0xb8, 0x60, 0x23, 0x69, 0x5b, 0x47, 0x3a,
	0xe7, 0x37, 0x6e, 0xdf, 0x46, 0x3a, 0xe7, 0x37, 0x18, 0x29, 0xe2, 0xc9, 0x54, 0x5d, 0xba, 0xf7,
	0x75, 0x24, 0x6d, 0x95, 0x4b, 0xbf, 0x5e, 0x2d, 0x3d, 0x83, 0xb6, 0x3c, 0x09, 0xe6, 0xee, 0x86,
	0xde, 0x19, 0x8e, 0x31, 0x8a, 0x3c, 0x4b, 0x13, 0x75, 0xe9, 0x6e, 0xea, 0x28, 0xda, 0xc2, 0x35,
	0xe5, 0xaf, 0x3c, 0x90, 0xee, 0x96, 0x5e, 0x93, 0x0c, 0xb6, 0x0f, 0x7d, 0x19, 0x28, 0x91, 0x4c,
	0x5f, 0x88, 0x24, 0x88, 0xdc, 0x07, 0xfb, 0x8d, 0x83, 0xa6, 0x5f, 0x86, 0xd8, 0x7d, 0x68, 0x28,
	0x97, 0x51, 0x35, 0x1b, 0xaa, 0x7c, 0xd8, 0x0f, 0x2b, 0x87, 0x5d, 0xcc, 0x9c, 0x26, 0xee, 0x76,
	0x69, 0xe6, 0x34, 0xc1, 0x2c, 0xd5, 0x3c, 0xe3, 0xee, 0x0e, 0xc1, 0x34, 0xc6, 0x75, 0x6f, 0x82,
	0x44, 0xf1, 0xc9, 0x71, 0x3a, 0x4b, 0x94, 0xfb, 0x88, 0x72, 0x2a, 0x43, 0xde, 0x5f, 0x5d, 0xd8,
	0x78, 0x21, 0xa2, 0xf8, 0x28, 0x8a, 0xce, 0x78, 0x9e, 0x07, 0x53, 0x8e, 0x81, 0xa2, 0x74, 0x9a,
	0x1a, 0x5a, 0xd2, 0x18, 0xcb, 0x8c, 0xfd, 0xf2, 0x3a, 0x4d, 0xa6, 0x86, 0x98, 0x85, 0x8d, 0x74,
	0x11, 0xf9, 0x98, 0x47, 0x3c, 0x54, 0x63, 0x1e, 0x28, 0xa2, 0x4b, 0xcb, 0xaf, 0x60, 0x48, 0x4b,
	0xf4, 0x7f, 0x23, 0x45, 0xc8, 0x89, 0x34, 0x4d, 0x7f, 0x01, 0xb0, 0x2f, 0x60, 0x0b, 0x8d, 0x71,
	0x28, 0x39, 0x4f, 0x6e, 0xa4, 0x40, 0x5a, 0xac, 0xd1, 0xea, 0x4b, 0x38, 0xdb, 0x03, 0x40, 0xb6,
	0xf2, 0x44, 0x9d, 0xcf, 0x62, 0x43, 0xab, 0x12, 0x62, 0x33, 0x25, 0xe2, 0x76, 0x29, 0x46, 0x61,
	0xb3, 0x43, 0xd8, 0x16, 0xf9, 0x78, 0x96, 0x65, 0xa9, 0x54, 0xa3, 0x24, 0x12, 0x09, 0x7f, 0x17,
	0xa8, 0xf0, 0xd2, 0x30, 0xad, 0x76, 0x0e, 0xe3, 0x85, 0x92, 0x07, 0x8a, 0x1f, 0x29, 0xa2, 0x9e,
	0xe3, 0x17, 0x36, 0x1e, 0xc6, 0x85, 0x98, 0xbe, 0xc5, 0xaa, 0x6b, 0xee, 0x59, 0xd3, 0xee, 0xf7,
	0x44, 0x06, 0x71, 0x40, 0xf4, 0x73, 0xfc, 0x05, 0xc0, 0x0e, 0x60, 0x73, 0x96, 0x73, 0x79, 0x14,
	0x86, 0x3c, 0xcf, 0xdf, 0x8a, 0x98, 0xe7, 0x86, 0x8b, 0xb7, 0x61, 0x6c, 0x58, 0xfc, 0xec, 0x79,
	0xfa, 0x21, 0x7d, 0xff, 0x1e, 0x6b, 0xb7, 0x4e, 0xb5, 0xab, 0x82, 0x78, 0x02, 0x14, 0xdc, 0x34,
	0x28, 0x11, 0xd5, 0xf1, 0x2b, 0x18, 0x1b, 0x02, 0xc3, 0xe0, 0xaf, 0xc5, 0xef, 0x7a, 0x63, 0x7a,
	0x59, 0x4d, 0xde, 0x9a, 0x19, 0x3c, 0x13, 0x44, 0x8f, 0x75, 0x65, 0xb5, 0xb7, 0xe6, 0xf4, 0x12,
	0x6e, 0x64, 0x25, 0x0b, 0x92, 0xf9, 0x28, 0xcf, 0x67, 0x7c, 0x42, 0x04, 0xd7, 0xb2, 0xb2, 0x00,
	0xb1, 0x5a, 0x21, 0x72, 0x4e, 0xce, 0x0d, 0xd1, 0xad, 0x89, 0xf9, 0x9b, 0x13, 0x1c, 0x87, 0xa9,
	0xe4, 0xc4, 0xf9, 0xa6, 0x5f, 0xc1, 0x0a, 0x79, 0xd9, 0xae, 0x95, 0x97, 0x9d, 0x95, 0xf2, 0xf2,
	0x68, 0x95, 0xbc, 0x7c, 0x54, 0x2f, 0x2f, 0xee, 0x4a, 0x79, 0x79, 0xbc, 0x4a, 0x5e, 0x06, 0x65,
	0x79, 0xb1, 0x62, 0xf1, 0x71, 0xad, 0x58, 0xec, 0xd6, 0x8b, 0xc5, 0x93, 0xb2, 0x58, 0x2c, 0x89,
	0xf4, 0x5e, 0x8d, 0x48, 0x7b, 0x3f, 0xc1, 0x06, 0x29, 0xfe, 0x09, 0x57, 0x81, 0x88, 0xf0, 0xa6,
	0xda, 0x03, 0xb0, 0x37, 0xd3, 0x68, 0x62, 0xee, 0xaa, 0x12, 0xb2, 0xfa, 0x6e, 0xf1, 0xfe, 0x6e,
	0xde, 0x0a, 0x96, 0xd1, 0xe6, 0xe2, 0x60, 0xca, 0x8d, 0x0a, 0x68, 0xa3, 0xac, 0x4b, 0xcd, 0x95,
	0xba, 0xd4, 0xaa, 0xea, 0x12, 0x6e, 0x9e, 0x84, 0xce, 0xf4, 0xbd, 0xb1, 0xb0, 0x50, 0x73, 0xdc,
	0xbb, 0xb9, 0x2f, 0x70, 0xac, 0x29, 0x92, 0x28, 0x9e, 0x28, 0xea, 0x6c, 0xa2, 0x08, 0x99, 0x85,
	0xba, 0x75, 0xe9, 0x4a, 0xd3, 0xea, 0xe6, 0x42, 0x57, 0xce, 0x12, 0xa4, 0xa0, 0xe9, 0x60, 0x6b,
	0x2e, 0x97, 0xd0, 0xa9, 0xbb, 0xe7, 0x06, 0xd0, 0xb3, 0x77, 0x1a, 0xf5, 0xaf, 0xe3, 0x17, 0x36,
	0xfb, 0x0c, 0xba, 0x92, 0x47, 0x3c, 0xc8, 0x39, 0xb5, 0x6f, 0xff, 0xb0, 0x8f, 0xf7, 0xb8, 0xaf,
	0x21, 0xdf, 0xce, 0x79, 0xdf, 0x43, 0xd7, 0x60, 0x4b, 0x0f, 0x05, 0x67, 0xf1, 0x50, 0xc0, 0xec,
	0x27, 0x81, 0xe2, 0xa6, 0x68, 0x34, 0xf6, 0xbe, 0x06, 0x97, 0x6a, 0x7e, 0x2c, 0xf9, 0x44, 0xa8,
	0xfc, 0x9d, 0x50, 0x97, 0x28, 0x1d, 0xf4, 0xe8, 0x70, 0xa1, 0x7b, 0x66, 0x8e, 0x4a, 0x9f, 0xa3,
	0x35, 0xbd, 0x1f, 0x56, 0x7e, 0x95, 0xb1, 0x3d, 0x58, 0xc3, 0xba, 0xd8, 0x97, 0x47, 0x0f, 0x33,
	0xc6, 0x49, 0x5f, 0xc3, 0x9e, 0x80, 0x36, 0x89, 0xd3, 0x00, 0x7a, 0x08, 0x98, 0x27, 0x02, 0x65,
	0x6a, 0x6d, 0x24, 0x91, 0x1d, 0x9f, 0x86, 0x26, 0xdf, 0x12, 0x82, 0x75, 0xc9, 0xb8, 0xcc, 0xd3,
	0x24, 0x77, 0x5b, 0xb4, 0x0a, 0xd5, 0xe5, 0x8d, 0x86, 0x7c, 0x3b, 0xe7, 0xfd, 0xd1, 0x80, 0xae,
	0x01, 0x57, 0x50, 0x89, 0x41, 0x3b, 0xc1, 0x04, 0x4c, 0x49, 0x70, 0x8c, 0x54, 0xc1, 0xdf, 0x82,
	0x43, 0xc6, 0x42, 0x35, 0x95, 0x69, 0xc4, 0x8f, 0xd3, 0x6b, 0x2e, 0xcd, 0x93, 0x63, 0x01, 0xe0,
	0xac, 0x5e, 0x16, 0x2b, 0xac, 0xaf, 0x8d, 0x05, 0xe0, 0x7d, 0x0e, 0xfd, 0x11, 0x2e, 0x78, 0x14,
	0x45, 0xa6, 0xb2, 0x2b, 0x9a, 0xe0, 0xab, 0xb2, 0x23, 0xbd, 0xe3, 0x28, 0xd1, 0xca, 0x3b, 0x8e,
	0x1c, 0x7c, 0x33, 0xe1, 0x3d, 0x81, 0x35, 0x02, 0xea, 0x77, 0xe8, 0x3d, 0x84, 0x07, 0xaf, 0x0d,
	0x01, 0x8a, 0xe7, 0xa4, 0xf7, 0xed, 0x32, 0x78, 0xa7, 0x37, 0xe3, 0x43, 0x78, 0xa0, 0xcf, 0x3d,
	0x8d, 0x45, 0x32, 0x3d, 0xe7, 0x37, 0x26, 0xd8, 0x6d, 0xf0, 0x4e, 0xc1, 0xce, 0xc1, 0x19, 0xf3,
	0x40, 0x86, 0x97, 0xe8, 0xff, 0x25, 0xf4, 0xf2, 0xd9, 0xc5, 0x6f, 0x3c, 0x54, 0xf6, 0x8b, 0x4d,
	0xfc, 0x42, 0x3b, 0xe8, 0xef, 0x0a, 0x07, 0xdc, 0xa9, 0x4a, 0x95, 0x79, 0x38, 0xb6, 0x7c, 0x6d,
	0x78, 0x8f, 0x17, 0xf1, 0xae, 0xf0, 0x25, 0x73, 0x65, 0x0a, 0xd1, 0xb8, 0xf2, 0xfe, 0x6c, 0x40,
	0xbf, 0x14, 0x8a, 0x02, 0xa0, 0x30, 0xd8, 0x52, 0x91, 0xc1, 0x36, 0xa0, 0x29, 0x26, 0x86, 0x0a,
	0x4d, 0x31, 0x61, 0xfb, 0xb6, 0xa0, 0x2d, 0xea, 0x3d, 0x28, 0x6a, 0x9f, 0x5b, 0xfa, 0x78, 0xd0,
	0x99, 0xf2, 0x44, 0xf2, 0xdc, 0x6d, 0x53, 0xce, 0xe4, 0xf2, 0x92, 0x10, 0xdf, 0xcc, 0x54, 0x14,
	0xc6, 0x31, 0x0a, 0xe3, 0x15, 0x6a, 0xd4, 0x59, 0x84, 0xf6, 0x09, 0xb1, 0xca, 0xe4, 0xed, 0x42,
	0xe7, 0x65, 0x11, 0x81, 0x54, 0xa7, 0xb1, 0x78, 0x53, 0x79, 0x1e, 0x74, 0xb4, 0x3f, 0x72, 0x29,
	0xb8, 0xe6, 0xd2, 0x1e, 0x7c, 0xd3, 0xb7, 0xa6, 0xb7, 0x07, 0x1d, 0x9d, 0x2e, 0xee, 0x37, 0x8f,
	0x83, 0x28, 0xb2, 0xfb, 0x25, 0x03, 0xff, 0x68, 0xbc, 0xe4, 0x0a, 0xdf, 0x5d, 0xf9, 0xf3, 0xf9,
	0xb1, 0x98, 0x98, 0x3f, 0x1a, 0xa1, 0x48, 0x78, 0x1c, 0x14, 0x4d, 0x5f, 0xd8, 0xf8, 0x47, 0xa3,
	0xea, 0x9f, 0xdf, 0xe5, 0x9c, 0x0f, 0xff, 0x6d, 0xe9, 0xc7, 0xdd, 0x98, 0xcb, 0x6b, 0x11, 0xf2,
	0xd3, 0x0f, 0x8a, 0x3d, 0x83, 0xf5, 0xca, 0x5f, 0x16, 0xb6, 0x8d, 0x9f, 0xdd, 0xfe, 0xd7, 0x33,
	0xa8, 0x43, 0x33, 0xef, 0x1e, 0xfb, 0x0e, 0xfa, 0xa5, 0x8b, 0x82, 0xb1, 0x62, 0xcd, 0xe2, 0x1a,
	0x1a, 0x2c, 0x63, 0xf8, 0xe1, 0xcf, 0xb0, 0x53, 0xab, 0x5b, 0x6c, 0xb7, 0x70, 0xaf, 0x11, 0xc2,
	0xc1, 0xff, 0xcd, 0x62, 0xd8, 0x21, 0xf4, 0x6c, 0xd3, 0xb2, 0xcd, 0x82, 0x25, 0xba, 0xd7, 0x07,
	0xb7, 0x00, 0xf4, 0xff, 0x11, 0x36, 0xaa, 0xed, 0xc7, 0x76, 0xd0, 0x69, 0xa9, 0x4f, 0x07, 0xb5,
	0xb0, 0x89, 0x50, 0xed, 0x39, 0x1d, 0x61, 0xa9, 0x39, 0x07, 0xb5, 0x30, 0x46, 0x38, 0x80, 0x8e,
	0xee, 0x08, 0xb6, 0xbe, 0x68, 0x34, 0xfc, 0xa2, 0x62, 0xa2, 0xe7, 0x33, 0x58, 0xaf, 0x1c, 0xbb,
	0x3e, 0xac, 0xdb, 0xcc, 0x19, 0xd4, 0xa0, 0x79, 0xe6, 0xdd, 0xbb, 0xe8, 0xd0, 0x3f, 0xdb, 0xa7,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x50, 0x11, 0x9d, 0xeb, 0x0e, 0x00, 0x00,
}
