// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cms.ext.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserLoginReq struct {
	User     string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *UserLoginReq) Reset()                    { *m = UserLoginReq{} }
func (m *UserLoginReq) String() string            { return proto.CompactTextString(m) }
func (*UserLoginReq) ProtoMessage()               {}
func (*UserLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *UserLoginReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserLoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserLoginRsp struct {
	AdminID    int64  `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
	CinemaName string `protobuf:"bytes,3,opt,name=cinemaName" json:"cinemaName,omitempty"`
}

func (m *UserLoginRsp) Reset()                    { *m = UserLoginRsp{} }
func (m *UserLoginRsp) String() string            { return proto.CompactTextString(m) }
func (*UserLoginRsp) ProtoMessage()               {}
func (*UserLoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *UserLoginRsp) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *UserLoginRsp) GetCinemaName() string {
	if m != nil {
		return m.CinemaName
	}
	return ""
}

type UpdateMessageReq struct {
	Table string `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	Json  string `protobuf:"bytes,2,opt,name=json" json:"json,omitempty"`
	Num   string `protobuf:"bytes,3,opt,name=num" json:"num,omitempty"`
}

func (m *UpdateMessageReq) Reset()                    { *m = UpdateMessageReq{} }
func (m *UpdateMessageReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMessageReq) ProtoMessage()               {}
func (*UpdateMessageReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *UpdateMessageReq) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *UpdateMessageReq) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

func (m *UpdateMessageReq) GetNum() string {
	if m != nil {
		return m.Num
	}
	return ""
}

type UpdateMessageRsp struct {
}

func (m *UpdateMessageRsp) Reset()                    { *m = UpdateMessageRsp{} }
func (m *UpdateMessageRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMessageRsp) ProtoMessage()               {}
func (*UpdateMessageRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type AllFilmsReq struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *AllFilmsReq) Reset()                    { *m = AllFilmsReq{} }
func (m *AllFilmsReq) String() string            { return proto.CompactTextString(m) }
func (*AllFilmsReq) ProtoMessage()               {}
func (*AllFilmsReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *AllFilmsReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllFilmsReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type AllFilmsRsp struct {
	Total int64   `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Films []*Film `protobuf:"bytes,2,rep,name=films" json:"films,omitempty"`
}

func (m *AllFilmsRsp) Reset()                    { *m = AllFilmsRsp{} }
func (m *AllFilmsRsp) String() string            { return proto.CompactTextString(m) }
func (*AllFilmsRsp) ProtoMessage()               {}
func (*AllFilmsRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *AllFilmsRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *AllFilmsRsp) GetFilms() []*Film {
	if m != nil {
		return m.Films
	}
	return nil
}

type Film struct {
	MovieID              int64    `protobuf:"varint,1,opt,name=movieID" json:"movieID,omitempty"`
	Img                  string   `protobuf:"bytes,2,opt,name=img" json:"img,omitempty"`
	Length               int64    `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	IsSelectSeat         int64    `protobuf:"varint,4,opt,name=isSelectSeat" json:"isSelectSeat,omitempty"`
	FilmPrice            float32  `protobuf:"fixed32,5,opt,name=filmPrice" json:"filmPrice,omitempty"`
	FilmScreenwriter     string   `protobuf:"bytes,6,opt,name=filmScreenwriter" json:"filmScreenwriter,omitempty"`
	FilmDirector         string   `protobuf:"bytes,7,opt,name=filmDirector" json:"filmDirector,omitempty"`
	CommentNum           int64    `protobuf:"varint,8,opt,name=commentNum" json:"commentNum,omitempty"`
	TitleCn              string   `protobuf:"bytes,9,opt,name=titleCn" json:"titleCn,omitempty"`
	TitleEn              string   `protobuf:"bytes,10,opt,name=titleEn" json:"titleEn,omitempty"`
	IsSupportInlineWatch int64    `protobuf:"varint,11,opt,name=isSupportInlineWatch" json:"isSupportInlineWatch,omitempty"`
	CreateAt             string   `protobuf:"bytes,12,opt,name=createAt" json:"createAt,omitempty"`
	Type                 string   `protobuf:"bytes,13,opt,name=type" json:"type,omitempty"`
	FilmDrama            string   `protobuf:"bytes,14,opt,name=filmDrama" json:"filmDrama,omitempty"`
	CommonSpecial        string   `protobuf:"bytes,15,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
	UserAccessTimes      int64    `protobuf:"varint,16,opt,name=userAccessTimes" json:"userAccessTimes,omitempty"`
	FilmBoxoffice        float32  `protobuf:"fixed32,17,opt,name=filmBoxoffice" json:"filmBoxoffice,omitempty"`
	WantedCount          int64    `protobuf:"varint,18,opt,name=wantedCount" json:"wantedCount,omitempty"`
	UserCommentTimes     int64    `protobuf:"varint,19,opt,name=userCommentTimes" json:"userCommentTimes,omitempty"`
	CompanyIssued        string   `protobuf:"bytes,20,opt,name=companyIssued" json:"companyIssued,omitempty"`
	Country              string   `protobuf:"bytes,21,opt,name=country" json:"country,omitempty"`
	RatingFinal          float32  `protobuf:"fixed32,22,opt,name=ratingFinal" json:"ratingFinal,omitempty"`
	Is3D                 int64    `protobuf:"varint,23,opt,name=is3D" json:"is3D,omitempty"`
	IsDMAX               int64    `protobuf:"varint,24,opt,name=isDMAX" json:"isDMAX,omitempty"`
	IsFilter             int64    `protobuf:"varint,25,opt,name=isFilter" json:"isFilter,omitempty"`
	IsHot                int64    `protobuf:"varint,26,opt,name=isHot" json:"isHot,omitempty"`
	IsIMAX               int64    `protobuf:"varint,27,opt,name=isIMAX" json:"isIMAX,omitempty"`
	IsIMAX3D             int64    `protobuf:"varint,28,opt,name=isIMAX3D" json:"isIMAX3D,omitempty"`
	IsNew                int64    `protobuf:"varint,29,opt,name=isNew" json:"isNew,omitempty"`
	IsTicking            int64    `protobuf:"varint,30,opt,name=isTicking" json:"isTicking,omitempty"`
	RDay                 int64    `protobuf:"varint,31,opt,name=rDay" json:"rDay,omitempty"`
	RMonth               int64    `protobuf:"varint,32,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear                int64    `protobuf:"varint,33,opt,name=rYear" json:"rYear,omitempty"`
	ActorNames           []string `protobuf:"bytes,34,rep,name=actorNames" json:"actorNames,omitempty"`
	RYMD                 string   `protobuf:"bytes,35,opt,name=rYMD" json:"rYMD,omitempty"`
}

func (m *Film) Reset()                    { *m = Film{} }
func (m *Film) String() string            { return proto.CompactTextString(m) }
func (*Film) ProtoMessage()               {}
func (*Film) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Film) GetMovieID() int64 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

func (m *Film) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *Film) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Film) GetIsSelectSeat() int64 {
	if m != nil {
		return m.IsSelectSeat
	}
	return 0
}

func (m *Film) GetFilmPrice() float32 {
	if m != nil {
		return m.FilmPrice
	}
	return 0
}

func (m *Film) GetFilmScreenwriter() string {
	if m != nil {
		return m.FilmScreenwriter
	}
	return ""
}

func (m *Film) GetFilmDirector() string {
	if m != nil {
		return m.FilmDirector
	}
	return ""
}

func (m *Film) GetCommentNum() int64 {
	if m != nil {
		return m.CommentNum
	}
	return 0
}

func (m *Film) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

func (m *Film) GetTitleEn() string {
	if m != nil {
		return m.TitleEn
	}
	return ""
}

func (m *Film) GetIsSupportInlineWatch() int64 {
	if m != nil {
		return m.IsSupportInlineWatch
	}
	return 0
}

func (m *Film) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *Film) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Film) GetFilmDrama() string {
	if m != nil {
		return m.FilmDrama
	}
	return ""
}

func (m *Film) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func (m *Film) GetUserAccessTimes() int64 {
	if m != nil {
		return m.UserAccessTimes
	}
	return 0
}

func (m *Film) GetFilmBoxoffice() float32 {
	if m != nil {
		return m.FilmBoxoffice
	}
	return 0
}

func (m *Film) GetWantedCount() int64 {
	if m != nil {
		return m.WantedCount
	}
	return 0
}

func (m *Film) GetUserCommentTimes() int64 {
	if m != nil {
		return m.UserCommentTimes
	}
	return 0
}

func (m *Film) GetCompanyIssued() string {
	if m != nil {
		return m.CompanyIssued
	}
	return ""
}

func (m *Film) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Film) GetRatingFinal() float32 {
	if m != nil {
		return m.RatingFinal
	}
	return 0
}

func (m *Film) GetIs3D() int64 {
	if m != nil {
		return m.Is3D
	}
	return 0
}

func (m *Film) GetIsDMAX() int64 {
	if m != nil {
		return m.IsDMAX
	}
	return 0
}

func (m *Film) GetIsFilter() int64 {
	if m != nil {
		return m.IsFilter
	}
	return 0
}

func (m *Film) GetIsHot() int64 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *Film) GetIsIMAX() int64 {
	if m != nil {
		return m.IsIMAX
	}
	return 0
}

func (m *Film) GetIsIMAX3D() int64 {
	if m != nil {
		return m.IsIMAX3D
	}
	return 0
}

func (m *Film) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *Film) GetIsTicking() int64 {
	if m != nil {
		return m.IsTicking
	}
	return 0
}

func (m *Film) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *Film) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *Film) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *Film) GetActorNames() []string {
	if m != nil {
		return m.ActorNames
	}
	return nil
}

func (m *Film) GetRYMD() string {
	if m != nil {
		return m.RYMD
	}
	return ""
}

type AllUsersReq struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *AllUsersReq) Reset()                    { *m = AllUsersReq{} }
func (m *AllUsersReq) String() string            { return proto.CompactTextString(m) }
func (*AllUsersReq) ProtoMessage()               {}
func (*AllUsersReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *AllUsersReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllUsersReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type AllUsersRsp struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Total int64   `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AllUsersRsp) Reset()                    { *m = AllUsersRsp{} }
func (m *AllUsersRsp) String() string            { return proto.CompactTextString(m) }
func (*AllUsersRsp) ProtoMessage()               {}
func (*AllUsersRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *AllUsersRsp) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *AllUsersRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type User struct {
	UserId   int64  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	CreateAt string `protobuf:"bytes,4,opt,name=createAt" json:"createAt,omitempty"`
	Email    string `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Phone    string `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *User) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type AllAdminUsersReq struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *AllAdminUsersReq) Reset()                    { *m = AllAdminUsersReq{} }
func (m *AllAdminUsersReq) String() string            { return proto.CompactTextString(m) }
func (*AllAdminUsersReq) ProtoMessage()               {}
func (*AllAdminUsersReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *AllAdminUsersReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllAdminUsersReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type AllAdminUsersRsp struct {
	AdminUsers []*AdminUser `protobuf:"bytes,1,rep,name=adminUsers" json:"adminUsers,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AllAdminUsersRsp) Reset()                    { *m = AllAdminUsersRsp{} }
func (m *AllAdminUsersRsp) String() string            { return proto.CompactTextString(m) }
func (*AllAdminUsersRsp) ProtoMessage()               {}
func (*AllAdminUsersRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *AllAdminUsersRsp) GetAdminUsers() []*AdminUser {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *AllAdminUsersRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type AdminUser struct {
	AuID               int64  `protobuf:"varint,1,opt,name=AuID" json:"AuID,omitempty"`
	AdminName          string `protobuf:"bytes,2,opt,name=AdminName" json:"AdminName,omitempty"`
	AdminPassword      string `protobuf:"bytes,3,opt,name=AdminPassword" json:"AdminPassword,omitempty"`
	AdminCinemaID      int64  `protobuf:"varint,4,opt,name=AdminCinemaID" json:"AdminCinemaID,omitempty"`
	AdminLastLoginTime string `protobuf:"bytes,5,opt,name=AdminLastLoginTime" json:"AdminLastLoginTime,omitempty"`
	AdminNum           int64  `protobuf:"varint,6,opt,name=AdminNum" json:"AdminNum,omitempty"`
}

func (m *AdminUser) Reset()                    { *m = AdminUser{} }
func (m *AdminUser) String() string            { return proto.CompactTextString(m) }
func (*AdminUser) ProtoMessage()               {}
func (*AdminUser) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *AdminUser) GetAuID() int64 {
	if m != nil {
		return m.AuID
	}
	return 0
}

func (m *AdminUser) GetAdminName() string {
	if m != nil {
		return m.AdminName
	}
	return ""
}

func (m *AdminUser) GetAdminPassword() string {
	if m != nil {
		return m.AdminPassword
	}
	return ""
}

func (m *AdminUser) GetAdminCinemaID() int64 {
	if m != nil {
		return m.AdminCinemaID
	}
	return 0
}

func (m *AdminUser) GetAdminLastLoginTime() string {
	if m != nil {
		return m.AdminLastLoginTime
	}
	return ""
}

func (m *AdminUser) GetAdminNum() int64 {
	if m != nil {
		return m.AdminNum
	}
	return 0
}

type AllCommentsReq struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *AllCommentsReq) Reset()                    { *m = AllCommentsReq{} }
func (m *AllCommentsReq) String() string            { return proto.CompactTextString(m) }
func (*AllCommentsReq) ProtoMessage()               {}
func (*AllCommentsReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *AllCommentsReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllCommentsReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type AllCommentsRsp struct {
	Comments []*Comment `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AllCommentsRsp) Reset()                    { *m = AllCommentsRsp{} }
func (m *AllCommentsRsp) String() string            { return proto.CompactTextString(m) }
func (*AllCommentsRsp) ProtoMessage()               {}
func (*AllCommentsRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *AllCommentsRsp) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *AllCommentsRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Comment struct {
	CommentID int64  `protobuf:"varint,1,opt,name=commentID" json:"commentID,omitempty"`
	FilmID    int64  `protobuf:"varint,2,opt,name=filmID" json:"filmID,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	HeadImg   string `protobuf:"bytes,5,opt,name=headImg" json:"headImg,omitempty"`
	NickName  string `protobuf:"bytes,6,opt,name=nickName" json:"nickName,omitempty"`
	CreateAt  string `protobuf:"bytes,7,opt,name=createAt" json:"createAt,omitempty"`
	UpNum     int64  `protobuf:"varint,8,opt,name=upNum" json:"upNum,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *Comment) GetCommentID() int64 {
	if m != nil {
		return m.CommentID
	}
	return 0
}

func (m *Comment) GetFilmID() int64 {
	if m != nil {
		return m.FilmID
	}
	return 0
}

func (m *Comment) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetHeadImg() string {
	if m != nil {
		return m.HeadImg
	}
	return ""
}

func (m *Comment) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *Comment) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *Comment) GetUpNum() int64 {
	if m != nil {
		return m.UpNum
	}
	return 0
}

type AllOrdersReq struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *AllOrdersReq) Reset()                    { *m = AllOrdersReq{} }
func (m *AllOrdersReq) String() string            { return proto.CompactTextString(m) }
func (*AllOrdersReq) ProtoMessage()               {}
func (*AllOrdersReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *AllOrdersReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllOrdersReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type AllOrdersRsp struct {
	Orders []*OrderAll `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
	Total  int64       `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AllOrdersRsp) Reset()                    { *m = AllOrdersRsp{} }
func (m *AllOrdersRsp) String() string            { return proto.CompactTextString(m) }
func (*AllOrdersRsp) ProtoMessage()               {}
func (*AllOrdersRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *AllOrdersRsp) GetOrders() []*OrderAll {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *AllOrdersRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type OrderAll struct {
	OrderID     int64   `protobuf:"varint,1,opt,name=orderID" json:"orderID,omitempty"`
	OrderNum    string  `protobuf:"bytes,2,opt,name=orderNum" json:"orderNum,omitempty"`
	OrderStatus int64   `protobuf:"varint,3,opt,name=orderStatus" json:"orderStatus,omitempty"`
	OrderPrice  float32 `protobuf:"fixed32,4,opt,name=orderPrice" json:"orderPrice,omitempty"`
	CreateAt    string  `protobuf:"bytes,5,opt,name=createAt" json:"createAt,omitempty"`
	PayAt       string  `protobuf:"bytes,6,opt,name=payAt" json:"payAt,omitempty"`
	MhID        int64   `protobuf:"varint,7,opt,name=mhID" json:"mhID,omitempty"`
	OrderX      int64   `protobuf:"varint,8,opt,name=orderX" json:"orderX,omitempty"`
	OrderY      int64   `protobuf:"varint,9,opt,name=orderY" json:"orderY,omitempty"`
	UserID      int64   `protobuf:"varint,10,opt,name=userID" json:"userID,omitempty"`
	MovieID     int64   `protobuf:"varint,11,opt,name=movieID" json:"movieID,omitempty"`
	OrderScore  int64   `protobuf:"varint,12,opt,name=orderScore" json:"orderScore,omitempty"`
	StartTime   string  `protobuf:"bytes,13,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     string  `protobuf:"bytes,14,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *OrderAll) Reset()                    { *m = OrderAll{} }
func (m *OrderAll) String() string            { return proto.CompactTextString(m) }
func (*OrderAll) ProtoMessage()               {}
func (*OrderAll) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *OrderAll) GetOrderID() int64 {
	if m != nil {
		return m.OrderID
	}
	return 0
}

func (m *OrderAll) GetOrderNum() string {
	if m != nil {
		return m.OrderNum
	}
	return ""
}

func (m *OrderAll) GetOrderStatus() int64 {
	if m != nil {
		return m.OrderStatus
	}
	return 0
}

func (m *OrderAll) GetOrderPrice() float32 {
	if m != nil {
		return m.OrderPrice
	}
	return 0
}

func (m *OrderAll) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *OrderAll) GetPayAt() string {
	if m != nil {
		return m.PayAt
	}
	return ""
}

func (m *OrderAll) GetMhID() int64 {
	if m != nil {
		return m.MhID
	}
	return 0
}

func (m *OrderAll) GetOrderX() int64 {
	if m != nil {
		return m.OrderX
	}
	return 0
}

func (m *OrderAll) GetOrderY() int64 {
	if m != nil {
		return m.OrderY
	}
	return 0
}

func (m *OrderAll) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *OrderAll) GetMovieID() int64 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

func (m *OrderAll) GetOrderScore() int64 {
	if m != nil {
		return m.OrderScore
	}
	return 0
}

func (m *OrderAll) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *OrderAll) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type AllAddressReq struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *AllAddressReq) Reset()                    { *m = AllAddressReq{} }
func (m *AllAddressReq) String() string            { return proto.CompactTextString(m) }
func (*AllAddressReq) ProtoMessage()               {}
func (*AllAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *AllAddressReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllAddressReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type AllAddressRsp struct {
	Places []*PlaceAll `protobuf:"bytes,1,rep,name=places" json:"places,omitempty"`
	Total  int64       `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AllAddressRsp) Reset()                    { *m = AllAddressRsp{} }
func (m *AllAddressRsp) String() string            { return proto.CompactTextString(m) }
func (*AllAddressRsp) ProtoMessage()               {}
func (*AllAddressRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *AllAddressRsp) GetPlaces() []*PlaceAll {
	if m != nil {
		return m.Places
	}
	return nil
}

func (m *AllAddressRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type PlaceAll struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Count       int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	PinyinFull  string `protobuf:"bytes,4,opt,name=pinyinFull" json:"pinyinFull,omitempty"`
	PinyinShort string `protobuf:"bytes,5,opt,name=pinyinShort" json:"pinyinShort,omitempty"`
}

func (m *PlaceAll) Reset()                    { *m = PlaceAll{} }
func (m *PlaceAll) String() string            { return proto.CompactTextString(m) }
func (*PlaceAll) ProtoMessage()               {}
func (*PlaceAll) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *PlaceAll) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlaceAll) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PlaceAll) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlaceAll) GetPinyinFull() string {
	if m != nil {
		return m.PinyinFull
	}
	return ""
}

func (m *PlaceAll) GetPinyinShort() string {
	if m != nil {
		return m.PinyinShort
	}
	return ""
}

type AddFilmReq struct {
	AdminID              int64    `protobuf:"varint,1,opt,name=adminID" json:"adminID,omitempty"`
	Img                  string   `protobuf:"bytes,2,opt,name=img" json:"img,omitempty"`
	Length               int64    `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	IsSelectSeat         int64    `protobuf:"varint,4,opt,name=isSelectSeat" json:"isSelectSeat,omitempty"`
	FilmPrice            float32  `protobuf:"fixed32,5,opt,name=filmPrice" json:"filmPrice,omitempty"`
	FilmScreenwriter     string   `protobuf:"bytes,6,opt,name=filmScreenwriter" json:"filmScreenwriter,omitempty"`
	FilmDirector         string   `protobuf:"bytes,7,opt,name=filmDirector" json:"filmDirector,omitempty"`
	CommentNum           int64    `protobuf:"varint,8,opt,name=commentNum" json:"commentNum,omitempty"`
	TitleCn              string   `protobuf:"bytes,9,opt,name=titleCn" json:"titleCn,omitempty"`
	TitleEn              string   `protobuf:"bytes,10,opt,name=titleEn" json:"titleEn,omitempty"`
	IsSupportInlineWatch int64    `protobuf:"varint,11,opt,name=isSupportInlineWatch" json:"isSupportInlineWatch,omitempty"`
	CreateAt             string   `protobuf:"bytes,12,opt,name=createAt" json:"createAt,omitempty"`
	Type                 string   `protobuf:"bytes,13,opt,name=type" json:"type,omitempty"`
	FilmDrama            string   `protobuf:"bytes,14,opt,name=filmDrama" json:"filmDrama,omitempty"`
	CommonSpecial        string   `protobuf:"bytes,15,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
	UserAccessTimes      int64    `protobuf:"varint,16,opt,name=userAccessTimes" json:"userAccessTimes,omitempty"`
	FilmBoxoffice        float32  `protobuf:"fixed32,17,opt,name=filmBoxoffice" json:"filmBoxoffice,omitempty"`
	WantedCount          int64    `protobuf:"varint,18,opt,name=wantedCount" json:"wantedCount,omitempty"`
	UserCommentTimes     int64    `protobuf:"varint,19,opt,name=userCommentTimes" json:"userCommentTimes,omitempty"`
	CompanyIssued        string   `protobuf:"bytes,20,opt,name=companyIssued" json:"companyIssued,omitempty"`
	Country              string   `protobuf:"bytes,21,opt,name=country" json:"country,omitempty"`
	RatingFinal          float32  `protobuf:"fixed32,22,opt,name=ratingFinal" json:"ratingFinal,omitempty"`
	Is3D                 int64    `protobuf:"varint,23,opt,name=is3D" json:"is3D,omitempty"`
	IsDMAX               int64    `protobuf:"varint,24,opt,name=isDMAX" json:"isDMAX,omitempty"`
	IsFilter             int64    `protobuf:"varint,25,opt,name=isFilter" json:"isFilter,omitempty"`
	IsHot                int64    `protobuf:"varint,26,opt,name=isHot" json:"isHot,omitempty"`
	IsIMAX               int64    `protobuf:"varint,27,opt,name=isIMAX" json:"isIMAX,omitempty"`
	IsIMAX3D             int64    `protobuf:"varint,28,opt,name=isIMAX3D" json:"isIMAX3D,omitempty"`
	IsNew                int64    `protobuf:"varint,29,opt,name=isNew" json:"isNew,omitempty"`
	IsTicking            int64    `protobuf:"varint,30,opt,name=isTicking" json:"isTicking,omitempty"`
	RDay                 int64    `protobuf:"varint,31,opt,name=rDay" json:"rDay,omitempty"`
	RMonth               int64    `protobuf:"varint,32,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear                int64    `protobuf:"varint,33,opt,name=rYear" json:"rYear,omitempty"`
	ActorNames           []string `protobuf:"bytes,34,rep,name=actorNames" json:"actorNames,omitempty"`
}

func (m *AddFilmReq) Reset()                    { *m = AddFilmReq{} }
func (m *AddFilmReq) String() string            { return proto.CompactTextString(m) }
func (*AddFilmReq) ProtoMessage()               {}
func (*AddFilmReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *AddFilmReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *AddFilmReq) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *AddFilmReq) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AddFilmReq) GetIsSelectSeat() int64 {
	if m != nil {
		return m.IsSelectSeat
	}
	return 0
}

func (m *AddFilmReq) GetFilmPrice() float32 {
	if m != nil {
		return m.FilmPrice
	}
	return 0
}

func (m *AddFilmReq) GetFilmScreenwriter() string {
	if m != nil {
		return m.FilmScreenwriter
	}
	return ""
}

func (m *AddFilmReq) GetFilmDirector() string {
	if m != nil {
		return m.FilmDirector
	}
	return ""
}

func (m *AddFilmReq) GetCommentNum() int64 {
	if m != nil {
		return m.CommentNum
	}
	return 0
}

func (m *AddFilmReq) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

func (m *AddFilmReq) GetTitleEn() string {
	if m != nil {
		return m.TitleEn
	}
	return ""
}

func (m *AddFilmReq) GetIsSupportInlineWatch() int64 {
	if m != nil {
		return m.IsSupportInlineWatch
	}
	return 0
}

func (m *AddFilmReq) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *AddFilmReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AddFilmReq) GetFilmDrama() string {
	if m != nil {
		return m.FilmDrama
	}
	return ""
}

func (m *AddFilmReq) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func (m *AddFilmReq) GetUserAccessTimes() int64 {
	if m != nil {
		return m.UserAccessTimes
	}
	return 0
}

func (m *AddFilmReq) GetFilmBoxoffice() float32 {
	if m != nil {
		return m.FilmBoxoffice
	}
	return 0
}

func (m *AddFilmReq) GetWantedCount() int64 {
	if m != nil {
		return m.WantedCount
	}
	return 0
}

func (m *AddFilmReq) GetUserCommentTimes() int64 {
	if m != nil {
		return m.UserCommentTimes
	}
	return 0
}

func (m *AddFilmReq) GetCompanyIssued() string {
	if m != nil {
		return m.CompanyIssued
	}
	return ""
}

func (m *AddFilmReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *AddFilmReq) GetRatingFinal() float32 {
	if m != nil {
		return m.RatingFinal
	}
	return 0
}

func (m *AddFilmReq) GetIs3D() int64 {
	if m != nil {
		return m.Is3D
	}
	return 0
}

func (m *AddFilmReq) GetIsDMAX() int64 {
	if m != nil {
		return m.IsDMAX
	}
	return 0
}

func (m *AddFilmReq) GetIsFilter() int64 {
	if m != nil {
		return m.IsFilter
	}
	return 0
}

func (m *AddFilmReq) GetIsHot() int64 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *AddFilmReq) GetIsIMAX() int64 {
	if m != nil {
		return m.IsIMAX
	}
	return 0
}

func (m *AddFilmReq) GetIsIMAX3D() int64 {
	if m != nil {
		return m.IsIMAX3D
	}
	return 0
}

func (m *AddFilmReq) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

func (m *AddFilmReq) GetIsTicking() int64 {
	if m != nil {
		return m.IsTicking
	}
	return 0
}

func (m *AddFilmReq) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *AddFilmReq) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *AddFilmReq) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *AddFilmReq) GetActorNames() []string {
	if m != nil {
		return m.ActorNames
	}
	return nil
}

type AddFilmRsp struct {
}

func (m *AddFilmRsp) Reset()                    { *m = AddFilmRsp{} }
func (m *AddFilmRsp) String() string            { return proto.CompactTextString(m) }
func (*AddFilmRsp) ProtoMessage()               {}
func (*AddFilmRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

type UpdateFilmReq struct {
	MovieID       int64   `protobuf:"varint,1,opt,name=movieID" json:"movieID,omitempty"`
	Img           string  `protobuf:"bytes,2,opt,name=img" json:"img,omitempty"`
	Length        int64   `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	FilmPrice     float32 `protobuf:"fixed32,4,opt,name=filmPrice" json:"filmPrice,omitempty"`
	FilmDirector  string  `protobuf:"bytes,5,opt,name=filmDirector" json:"filmDirector,omitempty"`
	TitleCn       string  `protobuf:"bytes,6,opt,name=titleCn" json:"titleCn,omitempty"`
	TitleEn       string  `protobuf:"bytes,7,opt,name=titleEn" json:"titleEn,omitempty"`
	Type          string  `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	FilmDrama     string  `protobuf:"bytes,9,opt,name=filmDrama" json:"filmDrama,omitempty"`
	CommonSpecial string  `protobuf:"bytes,10,opt,name=commonSpecial" json:"commonSpecial,omitempty"`
	CompanyIssued string  `protobuf:"bytes,11,opt,name=companyIssued" json:"companyIssued,omitempty"`
	Country       string  `protobuf:"bytes,12,opt,name=country" json:"country,omitempty"`
	RDay          int64   `protobuf:"varint,13,opt,name=rDay" json:"rDay,omitempty"`
	RMonth        int64   `protobuf:"varint,14,opt,name=rMonth" json:"rMonth,omitempty"`
	RYear         int64   `protobuf:"varint,15,opt,name=rYear" json:"rYear,omitempty"`
	RYMD          string  `protobuf:"bytes,16,opt,name=rYMD" json:"rYMD,omitempty"`
	AdminID       int64   `protobuf:"varint,17,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *UpdateFilmReq) Reset()                    { *m = UpdateFilmReq{} }
func (m *UpdateFilmReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateFilmReq) ProtoMessage()               {}
func (*UpdateFilmReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *UpdateFilmReq) GetMovieID() int64 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

func (m *UpdateFilmReq) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *UpdateFilmReq) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *UpdateFilmReq) GetFilmPrice() float32 {
	if m != nil {
		return m.FilmPrice
	}
	return 0
}

func (m *UpdateFilmReq) GetFilmDirector() string {
	if m != nil {
		return m.FilmDirector
	}
	return ""
}

func (m *UpdateFilmReq) GetTitleCn() string {
	if m != nil {
		return m.TitleCn
	}
	return ""
}

func (m *UpdateFilmReq) GetTitleEn() string {
	if m != nil {
		return m.TitleEn
	}
	return ""
}

func (m *UpdateFilmReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpdateFilmReq) GetFilmDrama() string {
	if m != nil {
		return m.FilmDrama
	}
	return ""
}

func (m *UpdateFilmReq) GetCommonSpecial() string {
	if m != nil {
		return m.CommonSpecial
	}
	return ""
}

func (m *UpdateFilmReq) GetCompanyIssued() string {
	if m != nil {
		return m.CompanyIssued
	}
	return ""
}

func (m *UpdateFilmReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UpdateFilmReq) GetRDay() int64 {
	if m != nil {
		return m.RDay
	}
	return 0
}

func (m *UpdateFilmReq) GetRMonth() int64 {
	if m != nil {
		return m.RMonth
	}
	return 0
}

func (m *UpdateFilmReq) GetRYear() int64 {
	if m != nil {
		return m.RYear
	}
	return 0
}

func (m *UpdateFilmReq) GetRYMD() string {
	if m != nil {
		return m.RYMD
	}
	return ""
}

func (m *UpdateFilmReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type UpdateFilmRsp struct {
}

func (m *UpdateFilmRsp) Reset()                    { *m = UpdateFilmRsp{} }
func (m *UpdateFilmRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdateFilmRsp) ProtoMessage()               {}
func (*UpdateFilmRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

type DeleteFilmReq struct {
	MovieID int64 `protobuf:"varint,1,opt,name=movieID" json:"movieID,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *DeleteFilmReq) Reset()                    { *m = DeleteFilmReq{} }
func (m *DeleteFilmReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteFilmReq) ProtoMessage()               {}
func (*DeleteFilmReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *DeleteFilmReq) GetMovieID() int64 {
	if m != nil {
		return m.MovieID
	}
	return 0
}

func (m *DeleteFilmReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type DeleteFilmRsp struct {
}

func (m *DeleteFilmRsp) Reset()                    { *m = DeleteFilmRsp{} }
func (m *DeleteFilmRsp) String() string            { return proto.CompactTextString(m) }
func (*DeleteFilmRsp) ProtoMessage()               {}
func (*DeleteFilmRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

type AddAdminUserReq struct {
	AdminID       int64  `protobuf:"varint,1,opt,name=adminID" json:"adminID,omitempty"`
	AdminName     string `protobuf:"bytes,2,opt,name=AdminName" json:"AdminName,omitempty"`
	AdminPassword string `protobuf:"bytes,3,opt,name=AdminPassword" json:"AdminPassword,omitempty"`
	AdminCinemaID int64  `protobuf:"varint,4,opt,name=AdminCinemaID" json:"AdminCinemaID,omitempty"`
	AdminNum      int64  `protobuf:"varint,6,opt,name=AdminNum" json:"AdminNum,omitempty"`
}

func (m *AddAdminUserReq) Reset()                    { *m = AddAdminUserReq{} }
func (m *AddAdminUserReq) String() string            { return proto.CompactTextString(m) }
func (*AddAdminUserReq) ProtoMessage()               {}
func (*AddAdminUserReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *AddAdminUserReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *AddAdminUserReq) GetAdminName() string {
	if m != nil {
		return m.AdminName
	}
	return ""
}

func (m *AddAdminUserReq) GetAdminPassword() string {
	if m != nil {
		return m.AdminPassword
	}
	return ""
}

func (m *AddAdminUserReq) GetAdminCinemaID() int64 {
	if m != nil {
		return m.AdminCinemaID
	}
	return 0
}

func (m *AddAdminUserReq) GetAdminNum() int64 {
	if m != nil {
		return m.AdminNum
	}
	return 0
}

type AddAdminUserRsp struct {
}

func (m *AddAdminUserRsp) Reset()                    { *m = AddAdminUserRsp{} }
func (m *AddAdminUserRsp) String() string            { return proto.CompactTextString(m) }
func (*AddAdminUserRsp) ProtoMessage()               {}
func (*AddAdminUserRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

type AddAddressReq struct {
	AdminID     int64  `protobuf:"varint,1,opt,name=adminID" json:"adminID,omitempty"`
	Count       int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	PinyinFull  string `protobuf:"bytes,4,opt,name=pinyinFull" json:"pinyinFull,omitempty"`
	PinyinShort string `protobuf:"bytes,5,opt,name=pinyinShort" json:"pinyinShort,omitempty"`
}

func (m *AddAddressReq) Reset()                    { *m = AddAddressReq{} }
func (m *AddAddressReq) String() string            { return proto.CompactTextString(m) }
func (*AddAddressReq) ProtoMessage()               {}
func (*AddAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *AddAddressReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *AddAddressReq) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *AddAddressReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddAddressReq) GetPinyinFull() string {
	if m != nil {
		return m.PinyinFull
	}
	return ""
}

func (m *AddAddressReq) GetPinyinShort() string {
	if m != nil {
		return m.PinyinShort
	}
	return ""
}

type AddAddressRsp struct {
}

func (m *AddAddressRsp) Reset()                    { *m = AddAddressRsp{} }
func (m *AddAddressRsp) String() string            { return proto.CompactTextString(m) }
func (*AddAddressRsp) ProtoMessage()               {}
func (*AddAddressRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

type UpdateAddressReq struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Count       int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	PinyinFull  string `protobuf:"bytes,4,opt,name=pinyinFull" json:"pinyinFull,omitempty"`
	PinyinShort string `protobuf:"bytes,5,opt,name=pinyinShort" json:"pinyinShort,omitempty"`
	AdminID     int64  `protobuf:"varint,6,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *UpdateAddressReq) Reset()                    { *m = UpdateAddressReq{} }
func (m *UpdateAddressReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateAddressReq) ProtoMessage()               {}
func (*UpdateAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *UpdateAddressReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateAddressReq) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *UpdateAddressReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateAddressReq) GetPinyinFull() string {
	if m != nil {
		return m.PinyinFull
	}
	return ""
}

func (m *UpdateAddressReq) GetPinyinShort() string {
	if m != nil {
		return m.PinyinShort
	}
	return ""
}

func (m *UpdateAddressReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type UpdateAddressRsp struct {
}

func (m *UpdateAddressRsp) Reset()                    { *m = UpdateAddressRsp{} }
func (m *UpdateAddressRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdateAddressRsp) ProtoMessage()               {}
func (*UpdateAddressRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

type DeleteAddressReq struct {
	Id      int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *DeleteAddressReq) Reset()                    { *m = DeleteAddressReq{} }
func (m *DeleteAddressReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAddressReq) ProtoMessage()               {}
func (*DeleteAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *DeleteAddressReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteAddressReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type DeleteAddressRsp struct {
}

func (m *DeleteAddressRsp) Reset()                    { *m = DeleteAddressRsp{} }
func (m *DeleteAddressRsp) String() string            { return proto.CompactTextString(m) }
func (*DeleteAddressRsp) ProtoMessage()               {}
func (*DeleteAddressRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

type DeleteAdminUserReq struct {
	AuID    int64 `protobuf:"varint,1,opt,name=AuID" json:"AuID,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *DeleteAdminUserReq) Reset()                    { *m = DeleteAdminUserReq{} }
func (m *DeleteAdminUserReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAdminUserReq) ProtoMessage()               {}
func (*DeleteAdminUserReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *DeleteAdminUserReq) GetAuID() int64 {
	if m != nil {
		return m.AuID
	}
	return 0
}

func (m *DeleteAdminUserReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type DeleteAdminUserRsp struct {
}

func (m *DeleteAdminUserRsp) Reset()                    { *m = DeleteAdminUserRsp{} }
func (m *DeleteAdminUserRsp) String() string            { return proto.CompactTextString(m) }
func (*DeleteAdminUserRsp) ProtoMessage()               {}
func (*DeleteAdminUserRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

type AllMovieHallReq struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *AllMovieHallReq) Reset()                    { *m = AllMovieHallReq{} }
func (m *AllMovieHallReq) String() string            { return proto.CompactTextString(m) }
func (*AllMovieHallReq) ProtoMessage()               {}
func (*AllMovieHallReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *AllMovieHallReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllMovieHallReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type MovieHall struct {
	MhId      int64  `protobuf:"varint,1,opt,name=mhId" json:"mhId,omitempty"`
	MhName    string `protobuf:"bytes,2,opt,name=mhName" json:"mhName,omitempty"`
	MhAddress string `protobuf:"bytes,3,opt,name=mhAddress" json:"mhAddress,omitempty"`
	CinemaId  int64  `protobuf:"varint,4,opt,name=cinemaId" json:"cinemaId,omitempty"`
}

func (m *MovieHall) Reset()                    { *m = MovieHall{} }
func (m *MovieHall) String() string            { return proto.CompactTextString(m) }
func (*MovieHall) ProtoMessage()               {}
func (*MovieHall) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *MovieHall) GetMhId() int64 {
	if m != nil {
		return m.MhId
	}
	return 0
}

func (m *MovieHall) GetMhName() string {
	if m != nil {
		return m.MhName
	}
	return ""
}

func (m *MovieHall) GetMhAddress() string {
	if m != nil {
		return m.MhAddress
	}
	return ""
}

func (m *MovieHall) GetCinemaId() int64 {
	if m != nil {
		return m.CinemaId
	}
	return 0
}

type AllMovieHallRsp struct {
	MovieHalls []*MovieHall `protobuf:"bytes,1,rep,name=movieHalls" json:"movieHalls,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AllMovieHallRsp) Reset()                    { *m = AllMovieHallRsp{} }
func (m *AllMovieHallRsp) String() string            { return proto.CompactTextString(m) }
func (*AllMovieHallRsp) ProtoMessage()               {}
func (*AllMovieHallRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

func (m *AllMovieHallRsp) GetMovieHalls() []*MovieHall {
	if m != nil {
		return m.MovieHalls
	}
	return nil
}

func (m *AllMovieHallRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type AddMovieHallReq struct {
	AdminID   int64  `protobuf:"varint,1,opt,name=adminID" json:"adminID,omitempty"`
	MhName    string `protobuf:"bytes,2,opt,name=mhName" json:"mhName,omitempty"`
	MhAddress string `protobuf:"bytes,3,opt,name=mhAddress" json:"mhAddress,omitempty"`
	CinemaId  int64  `protobuf:"varint,4,opt,name=cinemaId" json:"cinemaId,omitempty"`
}

func (m *AddMovieHallReq) Reset()                    { *m = AddMovieHallReq{} }
func (m *AddMovieHallReq) String() string            { return proto.CompactTextString(m) }
func (*AddMovieHallReq) ProtoMessage()               {}
func (*AddMovieHallReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

func (m *AddMovieHallReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *AddMovieHallReq) GetMhName() string {
	if m != nil {
		return m.MhName
	}
	return ""
}

func (m *AddMovieHallReq) GetMhAddress() string {
	if m != nil {
		return m.MhAddress
	}
	return ""
}

func (m *AddMovieHallReq) GetCinemaId() int64 {
	if m != nil {
		return m.CinemaId
	}
	return 0
}

type AddMovieHallRsp struct {
}

func (m *AddMovieHallRsp) Reset()                    { *m = AddMovieHallRsp{} }
func (m *AddMovieHallRsp) String() string            { return proto.CompactTextString(m) }
func (*AddMovieHallRsp) ProtoMessage()               {}
func (*AddMovieHallRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

type UpdateMovieHallReq struct {
	AdminID   int64  `protobuf:"varint,1,opt,name=adminID" json:"adminID,omitempty"`
	MhName    string `protobuf:"bytes,2,opt,name=mhName" json:"mhName,omitempty"`
	MhAddress string `protobuf:"bytes,3,opt,name=mhAddress" json:"mhAddress,omitempty"`
	CinemaId  int64  `protobuf:"varint,4,opt,name=cinemaId" json:"cinemaId,omitempty"`
	MhId      int64  `protobuf:"varint,5,opt,name=mhId" json:"mhId,omitempty"`
}

func (m *UpdateMovieHallReq) Reset()                    { *m = UpdateMovieHallReq{} }
func (m *UpdateMovieHallReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMovieHallReq) ProtoMessage()               {}
func (*UpdateMovieHallReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *UpdateMovieHallReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *UpdateMovieHallReq) GetMhName() string {
	if m != nil {
		return m.MhName
	}
	return ""
}

func (m *UpdateMovieHallReq) GetMhAddress() string {
	if m != nil {
		return m.MhAddress
	}
	return ""
}

func (m *UpdateMovieHallReq) GetCinemaId() int64 {
	if m != nil {
		return m.CinemaId
	}
	return 0
}

func (m *UpdateMovieHallReq) GetMhId() int64 {
	if m != nil {
		return m.MhId
	}
	return 0
}

type UpdateMovieHallRsp struct {
}

func (m *UpdateMovieHallRsp) Reset()                    { *m = UpdateMovieHallRsp{} }
func (m *UpdateMovieHallRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMovieHallRsp) ProtoMessage()               {}
func (*UpdateMovieHallRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

type DeleteMovieHallReq struct {
	AdminID int64 `protobuf:"varint,1,opt,name=adminID" json:"adminID,omitempty"`
	MhId    int64 `protobuf:"varint,2,opt,name=mhId" json:"mhId,omitempty"`
}

func (m *DeleteMovieHallReq) Reset()                    { *m = DeleteMovieHallReq{} }
func (m *DeleteMovieHallReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteMovieHallReq) ProtoMessage()               {}
func (*DeleteMovieHallReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

func (m *DeleteMovieHallReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *DeleteMovieHallReq) GetMhId() int64 {
	if m != nil {
		return m.MhId
	}
	return 0
}

type DeleteMovieHallRsp struct {
}

func (m *DeleteMovieHallRsp) Reset()                    { *m = DeleteMovieHallRsp{} }
func (m *DeleteMovieHallRsp) String() string            { return proto.CompactTextString(m) }
func (*DeleteMovieHallRsp) ProtoMessage()               {}
func (*DeleteMovieHallRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

type AllCinemaFilmsReq struct {
	Page    int64 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID" json:"adminID,omitempty"`
}

func (m *AllCinemaFilmsReq) Reset()                    { *m = AllCinemaFilmsReq{} }
func (m *AllCinemaFilmsReq) String() string            { return proto.CompactTextString(m) }
func (*AllCinemaFilmsReq) ProtoMessage()               {}
func (*AllCinemaFilmsReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

func (m *AllCinemaFilmsReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllCinemaFilmsReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

type CinemaFilm struct {
	CinemaID         int64   `protobuf:"varint,1,opt,name=cinemaID" json:"cinemaID,omitempty"`
	FilmID           int64   `protobuf:"varint,2,opt,name=filmID" json:"filmID,omitempty"`
	HallID           int64   `protobuf:"varint,3,opt,name=hallID" json:"hallID,omitempty"`
	FilmName         string  `protobuf:"bytes,4,opt,name=filmName" json:"filmName,omitempty"`
	CinemaName       string  `protobuf:"bytes,5,opt,name=cinemaName" json:"cinemaName,omitempty"`
	ReleaseTimeYear  int64   `protobuf:"varint,6,opt,name=releaseTimeYear" json:"releaseTimeYear,omitempty"`
	ReleaseTimeMonth int64   `protobuf:"varint,7,opt,name=releaseTimeMonth" json:"releaseTimeMonth,omitempty"`
	ReleaseTimeDay   int64   `protobuf:"varint,8,opt,name=releaseTimeDay" json:"releaseTimeDay,omitempty"`
	ReleaseTime      string  `protobuf:"bytes,9,opt,name=releaseTime" json:"releaseTime,omitempty"`
	ReleaseType      string  `protobuf:"bytes,10,opt,name=releaseType" json:"releaseType,omitempty"`
	ReleaseAdd       string  `protobuf:"bytes,11,opt,name=releaseAdd" json:"releaseAdd,omitempty"`
	CfID             int64   `protobuf:"varint,12,opt,name=cfID" json:"cfID,omitempty"`
	Length           int64   `protobuf:"varint,13,opt,name=length" json:"length,omitempty"`
	ReleaseDiscount  float32 `protobuf:"fixed32,14,opt,name=releaseDiscount" json:"releaseDiscount,omitempty"`
}

func (m *CinemaFilm) Reset()                    { *m = CinemaFilm{} }
func (m *CinemaFilm) String() string            { return proto.CompactTextString(m) }
func (*CinemaFilm) ProtoMessage()               {}
func (*CinemaFilm) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

func (m *CinemaFilm) GetCinemaID() int64 {
	if m != nil {
		return m.CinemaID
	}
	return 0
}

func (m *CinemaFilm) GetFilmID() int64 {
	if m != nil {
		return m.FilmID
	}
	return 0
}

func (m *CinemaFilm) GetHallID() int64 {
	if m != nil {
		return m.HallID
	}
	return 0
}

func (m *CinemaFilm) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *CinemaFilm) GetCinemaName() string {
	if m != nil {
		return m.CinemaName
	}
	return ""
}

func (m *CinemaFilm) GetReleaseTimeYear() int64 {
	if m != nil {
		return m.ReleaseTimeYear
	}
	return 0
}

func (m *CinemaFilm) GetReleaseTimeMonth() int64 {
	if m != nil {
		return m.ReleaseTimeMonth
	}
	return 0
}

func (m *CinemaFilm) GetReleaseTimeDay() int64 {
	if m != nil {
		return m.ReleaseTimeDay
	}
	return 0
}

func (m *CinemaFilm) GetReleaseTime() string {
	if m != nil {
		return m.ReleaseTime
	}
	return ""
}

func (m *CinemaFilm) GetReleaseType() string {
	if m != nil {
		return m.ReleaseType
	}
	return ""
}

func (m *CinemaFilm) GetReleaseAdd() string {
	if m != nil {
		return m.ReleaseAdd
	}
	return ""
}

func (m *CinemaFilm) GetCfID() int64 {
	if m != nil {
		return m.CfID
	}
	return 0
}

func (m *CinemaFilm) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *CinemaFilm) GetReleaseDiscount() float32 {
	if m != nil {
		return m.ReleaseDiscount
	}
	return 0
}

type AllCinemaFilmsRsp struct {
	CinemaFilms []*CinemaFilm `protobuf:"bytes,1,rep,name=cinemaFilms" json:"cinemaFilms,omitempty"`
	Total       int64         `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *AllCinemaFilmsRsp) Reset()                    { *m = AllCinemaFilmsRsp{} }
func (m *AllCinemaFilmsRsp) String() string            { return proto.CompactTextString(m) }
func (*AllCinemaFilmsRsp) ProtoMessage()               {}
func (*AllCinemaFilmsRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

func (m *AllCinemaFilmsRsp) GetCinemaFilms() []*CinemaFilm {
	if m != nil {
		return m.CinemaFilms
	}
	return nil
}

func (m *AllCinemaFilmsRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type AddCinemaFilmReq struct {
	CinemaID         int64   `protobuf:"varint,1,opt,name=cinemaID" json:"cinemaID,omitempty"`
	FilmID           int64   `protobuf:"varint,2,opt,name=filmID" json:"filmID,omitempty"`
	HallID           int64   `protobuf:"varint,3,opt,name=hallID" json:"hallID,omitempty"`
	FilmName         string  `protobuf:"bytes,4,opt,name=filmName" json:"filmName,omitempty"`
	CinemaName       string  `protobuf:"bytes,5,opt,name=cinemaName" json:"cinemaName,omitempty"`
	ReleaseTimeYear  int64   `protobuf:"varint,6,opt,name=releaseTimeYear" json:"releaseTimeYear,omitempty"`
	ReleaseTimeMonth int64   `protobuf:"varint,7,opt,name=releaseTimeMonth" json:"releaseTimeMonth,omitempty"`
	ReleaseTimeDay   int64   `protobuf:"varint,8,opt,name=releaseTimeDay" json:"releaseTimeDay,omitempty"`
	ReleaseTime      string  `protobuf:"bytes,9,opt,name=releaseTime" json:"releaseTime,omitempty"`
	ReleaseType      string  `protobuf:"bytes,10,opt,name=releaseType" json:"releaseType,omitempty"`
	ReleaseAdd       string  `protobuf:"bytes,11,opt,name=releaseAdd" json:"releaseAdd,omitempty"`
	AdminID          int64   `protobuf:"varint,12,opt,name=adminID" json:"adminID,omitempty"`
	Length           int64   `protobuf:"varint,13,opt,name=length" json:"length,omitempty"`
	ReleaseDiscount  float32 `protobuf:"fixed32,14,opt,name=releaseDiscount" json:"releaseDiscount,omitempty"`
}

func (m *AddCinemaFilmReq) Reset()                    { *m = AddCinemaFilmReq{} }
func (m *AddCinemaFilmReq) String() string            { return proto.CompactTextString(m) }
func (*AddCinemaFilmReq) ProtoMessage()               {}
func (*AddCinemaFilmReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *AddCinemaFilmReq) GetCinemaID() int64 {
	if m != nil {
		return m.CinemaID
	}
	return 0
}

func (m *AddCinemaFilmReq) GetFilmID() int64 {
	if m != nil {
		return m.FilmID
	}
	return 0
}

func (m *AddCinemaFilmReq) GetHallID() int64 {
	if m != nil {
		return m.HallID
	}
	return 0
}

func (m *AddCinemaFilmReq) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *AddCinemaFilmReq) GetCinemaName() string {
	if m != nil {
		return m.CinemaName
	}
	return ""
}

func (m *AddCinemaFilmReq) GetReleaseTimeYear() int64 {
	if m != nil {
		return m.ReleaseTimeYear
	}
	return 0
}

func (m *AddCinemaFilmReq) GetReleaseTimeMonth() int64 {
	if m != nil {
		return m.ReleaseTimeMonth
	}
	return 0
}

func (m *AddCinemaFilmReq) GetReleaseTimeDay() int64 {
	if m != nil {
		return m.ReleaseTimeDay
	}
	return 0
}

func (m *AddCinemaFilmReq) GetReleaseTime() string {
	if m != nil {
		return m.ReleaseTime
	}
	return ""
}

func (m *AddCinemaFilmReq) GetReleaseType() string {
	if m != nil {
		return m.ReleaseType
	}
	return ""
}

func (m *AddCinemaFilmReq) GetReleaseAdd() string {
	if m != nil {
		return m.ReleaseAdd
	}
	return ""
}

func (m *AddCinemaFilmReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *AddCinemaFilmReq) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *AddCinemaFilmReq) GetReleaseDiscount() float32 {
	if m != nil {
		return m.ReleaseDiscount
	}
	return 0
}

type AddCinemaFilmRsp struct {
}

func (m *AddCinemaFilmRsp) Reset()                    { *m = AddCinemaFilmRsp{} }
func (m *AddCinemaFilmRsp) String() string            { return proto.CompactTextString(m) }
func (*AddCinemaFilmRsp) ProtoMessage()               {}
func (*AddCinemaFilmRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

type UpdateCinemaFilmReq struct {
	CinemaID         int64   `protobuf:"varint,1,opt,name=cinemaID" json:"cinemaID,omitempty"`
	FilmID           int64   `protobuf:"varint,2,opt,name=filmID" json:"filmID,omitempty"`
	HallID           int64   `protobuf:"varint,3,opt,name=hallID" json:"hallID,omitempty"`
	FilmName         string  `protobuf:"bytes,4,opt,name=filmName" json:"filmName,omitempty"`
	CinemaName       string  `protobuf:"bytes,5,opt,name=cinemaName" json:"cinemaName,omitempty"`
	ReleaseTimeYear  int64   `protobuf:"varint,6,opt,name=releaseTimeYear" json:"releaseTimeYear,omitempty"`
	ReleaseTimeMonth int64   `protobuf:"varint,7,opt,name=releaseTimeMonth" json:"releaseTimeMonth,omitempty"`
	ReleaseTimeDay   int64   `protobuf:"varint,8,opt,name=releaseTimeDay" json:"releaseTimeDay,omitempty"`
	ReleaseTime      string  `protobuf:"bytes,9,opt,name=releaseTime" json:"releaseTime,omitempty"`
	ReleaseType      string  `protobuf:"bytes,10,opt,name=releaseType" json:"releaseType,omitempty"`
	ReleaseAdd       string  `protobuf:"bytes,11,opt,name=releaseAdd" json:"releaseAdd,omitempty"`
	AdminID          int64   `protobuf:"varint,12,opt,name=adminID" json:"adminID,omitempty"`
	Length           int64   `protobuf:"varint,13,opt,name=length" json:"length,omitempty"`
	ReleaseDiscount  float32 `protobuf:"fixed32,14,opt,name=releaseDiscount" json:"releaseDiscount,omitempty"`
	CfID             int64   `protobuf:"varint,15,opt,name=cfID" json:"cfID,omitempty"`
}

func (m *UpdateCinemaFilmReq) Reset()                    { *m = UpdateCinemaFilmReq{} }
func (m *UpdateCinemaFilmReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateCinemaFilmReq) ProtoMessage()               {}
func (*UpdateCinemaFilmReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

func (m *UpdateCinemaFilmReq) GetCinemaID() int64 {
	if m != nil {
		return m.CinemaID
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetFilmID() int64 {
	if m != nil {
		return m.FilmID
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetHallID() int64 {
	if m != nil {
		return m.HallID
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetFilmName() string {
	if m != nil {
		return m.FilmName
	}
	return ""
}

func (m *UpdateCinemaFilmReq) GetCinemaName() string {
	if m != nil {
		return m.CinemaName
	}
	return ""
}

func (m *UpdateCinemaFilmReq) GetReleaseTimeYear() int64 {
	if m != nil {
		return m.ReleaseTimeYear
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetReleaseTimeMonth() int64 {
	if m != nil {
		return m.ReleaseTimeMonth
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetReleaseTimeDay() int64 {
	if m != nil {
		return m.ReleaseTimeDay
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetReleaseTime() string {
	if m != nil {
		return m.ReleaseTime
	}
	return ""
}

func (m *UpdateCinemaFilmReq) GetReleaseType() string {
	if m != nil {
		return m.ReleaseType
	}
	return ""
}

func (m *UpdateCinemaFilmReq) GetReleaseAdd() string {
	if m != nil {
		return m.ReleaseAdd
	}
	return ""
}

func (m *UpdateCinemaFilmReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetReleaseDiscount() float32 {
	if m != nil {
		return m.ReleaseDiscount
	}
	return 0
}

func (m *UpdateCinemaFilmReq) GetCfID() int64 {
	if m != nil {
		return m.CfID
	}
	return 0
}

type UpdateCinemaFilmRsp struct {
}

func (m *UpdateCinemaFilmRsp) Reset()                    { *m = UpdateCinemaFilmRsp{} }
func (m *UpdateCinemaFilmRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdateCinemaFilmRsp) ProtoMessage()               {}
func (*UpdateCinemaFilmRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

type DeleteCinemaFilmReq struct {
	AdminID int64 `protobuf:"varint,1,opt,name=adminID" json:"adminID,omitempty"`
	CfId    int64 `protobuf:"varint,2,opt,name=cfId" json:"cfId,omitempty"`
}

func (m *DeleteCinemaFilmReq) Reset()                    { *m = DeleteCinemaFilmReq{} }
func (m *DeleteCinemaFilmReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteCinemaFilmReq) ProtoMessage()               {}
func (*DeleteCinemaFilmReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{54} }

func (m *DeleteCinemaFilmReq) GetAdminID() int64 {
	if m != nil {
		return m.AdminID
	}
	return 0
}

func (m *DeleteCinemaFilmReq) GetCfId() int64 {
	if m != nil {
		return m.CfId
	}
	return 0
}

type DeleteCinemaFilmRsp struct {
}

func (m *DeleteCinemaFilmRsp) Reset()                    { *m = DeleteCinemaFilmRsp{} }
func (m *DeleteCinemaFilmRsp) String() string            { return proto.CompactTextString(m) }
func (*DeleteCinemaFilmRsp) ProtoMessage()               {}
func (*DeleteCinemaFilmRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{55} }

func init() {
	proto.RegisterType((*UserLoginReq)(nil), "pb.UserLoginReq")
	proto.RegisterType((*UserLoginRsp)(nil), "pb.UserLoginRsp")
	proto.RegisterType((*UpdateMessageReq)(nil), "pb.UpdateMessageReq")
	proto.RegisterType((*UpdateMessageRsp)(nil), "pb.UpdateMessageRsp")
	proto.RegisterType((*AllFilmsReq)(nil), "pb.AllFilmsReq")
	proto.RegisterType((*AllFilmsRsp)(nil), "pb.AllFilmsRsp")
	proto.RegisterType((*Film)(nil), "pb.Film")
	proto.RegisterType((*AllUsersReq)(nil), "pb.AllUsersReq")
	proto.RegisterType((*AllUsersRsp)(nil), "pb.AllUsersRsp")
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*AllAdminUsersReq)(nil), "pb.AllAdminUsersReq")
	proto.RegisterType((*AllAdminUsersRsp)(nil), "pb.AllAdminUsersRsp")
	proto.RegisterType((*AdminUser)(nil), "pb.AdminUser")
	proto.RegisterType((*AllCommentsReq)(nil), "pb.AllCommentsReq")
	proto.RegisterType((*AllCommentsRsp)(nil), "pb.AllCommentsRsp")
	proto.RegisterType((*Comment)(nil), "pb.Comment")
	proto.RegisterType((*AllOrdersReq)(nil), "pb.AllOrdersReq")
	proto.RegisterType((*AllOrdersRsp)(nil), "pb.AllOrdersRsp")
	proto.RegisterType((*OrderAll)(nil), "pb.OrderAll")
	proto.RegisterType((*AllAddressReq)(nil), "pb.AllAddressReq")
	proto.RegisterType((*AllAddressRsp)(nil), "pb.AllAddressRsp")
	proto.RegisterType((*PlaceAll)(nil), "pb.PlaceAll")
	proto.RegisterType((*AddFilmReq)(nil), "pb.AddFilmReq")
	proto.RegisterType((*AddFilmRsp)(nil), "pb.AddFilmRsp")
	proto.RegisterType((*UpdateFilmReq)(nil), "pb.UpdateFilmReq")
	proto.RegisterType((*UpdateFilmRsp)(nil), "pb.UpdateFilmRsp")
	proto.RegisterType((*DeleteFilmReq)(nil), "pb.DeleteFilmReq")
	proto.RegisterType((*DeleteFilmRsp)(nil), "pb.DeleteFilmRsp")
	proto.RegisterType((*AddAdminUserReq)(nil), "pb.AddAdminUserReq")
	proto.RegisterType((*AddAdminUserRsp)(nil), "pb.AddAdminUserRsp")
	proto.RegisterType((*AddAddressReq)(nil), "pb.AddAddressReq")
	proto.RegisterType((*AddAddressRsp)(nil), "pb.AddAddressRsp")
	proto.RegisterType((*UpdateAddressReq)(nil), "pb.UpdateAddressReq")
	proto.RegisterType((*UpdateAddressRsp)(nil), "pb.UpdateAddressRsp")
	proto.RegisterType((*DeleteAddressReq)(nil), "pb.DeleteAddressReq")
	proto.RegisterType((*DeleteAddressRsp)(nil), "pb.DeleteAddressRsp")
	proto.RegisterType((*DeleteAdminUserReq)(nil), "pb.DeleteAdminUserReq")
	proto.RegisterType((*DeleteAdminUserRsp)(nil), "pb.DeleteAdminUserRsp")
	proto.RegisterType((*AllMovieHallReq)(nil), "pb.AllMovieHallReq")
	proto.RegisterType((*MovieHall)(nil), "pb.MovieHall")
	proto.RegisterType((*AllMovieHallRsp)(nil), "pb.AllMovieHallRsp")
	proto.RegisterType((*AddMovieHallReq)(nil), "pb.AddMovieHallReq")
	proto.RegisterType((*AddMovieHallRsp)(nil), "pb.AddMovieHallRsp")
	proto.RegisterType((*UpdateMovieHallReq)(nil), "pb.UpdateMovieHallReq")
	proto.RegisterType((*UpdateMovieHallRsp)(nil), "pb.UpdateMovieHallRsp")
	proto.RegisterType((*DeleteMovieHallReq)(nil), "pb.DeleteMovieHallReq")
	proto.RegisterType((*DeleteMovieHallRsp)(nil), "pb.DeleteMovieHallRsp")
	proto.RegisterType((*AllCinemaFilmsReq)(nil), "pb.AllCinemaFilmsReq")
	proto.RegisterType((*CinemaFilm)(nil), "pb.CinemaFilm")
	proto.RegisterType((*AllCinemaFilmsRsp)(nil), "pb.AllCinemaFilmsRsp")
	proto.RegisterType((*AddCinemaFilmReq)(nil), "pb.AddCinemaFilmReq")
	proto.RegisterType((*AddCinemaFilmRsp)(nil), "pb.AddCinemaFilmRsp")
	proto.RegisterType((*UpdateCinemaFilmReq)(nil), "pb.UpdateCinemaFilmReq")
	proto.RegisterType((*UpdateCinemaFilmRsp)(nil), "pb.UpdateCinemaFilmRsp")
	proto.RegisterType((*DeleteCinemaFilmReq)(nil), "pb.DeleteCinemaFilmReq")
	proto.RegisterType((*DeleteCinemaFilmRsp)(nil), "pb.DeleteCinemaFilmRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CMSServiceExt service

type CMSServiceExtClient interface {
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...client.CallOption) (*UserLoginRsp, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...client.CallOption) (*UpdateMessageRsp, error)
	AllFilms(ctx context.Context, in *AllFilmsReq, opts ...client.CallOption) (*AllFilmsRsp, error)
	UpdateFilm(ctx context.Context, in *UpdateFilmReq, opts ...client.CallOption) (*UpdateFilmRsp, error)
	DeleteFilm(ctx context.Context, in *DeleteFilmReq, opts ...client.CallOption) (*DeleteFilmRsp, error)
	AllUsers(ctx context.Context, in *AllUsersReq, opts ...client.CallOption) (*AllUsersRsp, error)
	AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, opts ...client.CallOption) (*AllAdminUsersRsp, error)
	AllComments(ctx context.Context, in *AllCommentsReq, opts ...client.CallOption) (*AllCommentsRsp, error)
	AllOrders(ctx context.Context, in *AllOrdersReq, opts ...client.CallOption) (*AllOrdersRsp, error)
	AllAddress(ctx context.Context, in *AllAddressReq, opts ...client.CallOption) (*AllAddressRsp, error)
	AddFilm(ctx context.Context, in *AddFilmReq, opts ...client.CallOption) (*AddFilmRsp, error)
	AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...client.CallOption) (*AddAdminUserRsp, error)
	AddAddress(ctx context.Context, in *AddAddressReq, opts ...client.CallOption) (*AddAddressRsp, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...client.CallOption) (*UpdateAddressRsp, error)
	DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...client.CallOption) (*DeleteAddressRsp, error)
	DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, opts ...client.CallOption) (*DeleteAdminUserRsp, error)
	AllMovieHall(ctx context.Context, in *AllMovieHallReq, opts ...client.CallOption) (*AllMovieHallRsp, error)
	AddMovieHall(ctx context.Context, in *AddMovieHallReq, opts ...client.CallOption) (*AddMovieHallRsp, error)
	UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, opts ...client.CallOption) (*UpdateMovieHallRsp, error)
	DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, opts ...client.CallOption) (*DeleteMovieHallRsp, error)
	AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, opts ...client.CallOption) (*AllCinemaFilmsRsp, error)
	AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, opts ...client.CallOption) (*AddCinemaFilmRsp, error)
	UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, opts ...client.CallOption) (*UpdateCinemaFilmRsp, error)
	DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, opts ...client.CallOption) (*DeleteCinemaFilmRsp, error)
}

type cMSServiceExtClient struct {
	c           client.Client
	serviceName string
}

func NewCMSServiceExtClient(serviceName string, c client.Client) CMSServiceExtClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &cMSServiceExtClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *cMSServiceExtClient) UserLogin(ctx context.Context, in *UserLoginReq, opts ...client.CallOption) (*UserLoginRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.UserLogin", in)
	out := new(UserLoginRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...client.CallOption) (*UpdateMessageRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.UpdateMessage", in)
	out := new(UpdateMessageRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AllFilms(ctx context.Context, in *AllFilmsReq, opts ...client.CallOption) (*AllFilmsRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AllFilms", in)
	out := new(AllFilmsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) UpdateFilm(ctx context.Context, in *UpdateFilmReq, opts ...client.CallOption) (*UpdateFilmRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.UpdateFilm", in)
	out := new(UpdateFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) DeleteFilm(ctx context.Context, in *DeleteFilmReq, opts ...client.CallOption) (*DeleteFilmRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.DeleteFilm", in)
	out := new(DeleteFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AllUsers(ctx context.Context, in *AllUsersReq, opts ...client.CallOption) (*AllUsersRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AllUsers", in)
	out := new(AllUsersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, opts ...client.CallOption) (*AllAdminUsersRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AllAdminUsers", in)
	out := new(AllAdminUsersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AllComments(ctx context.Context, in *AllCommentsReq, opts ...client.CallOption) (*AllCommentsRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AllComments", in)
	out := new(AllCommentsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AllOrders(ctx context.Context, in *AllOrdersReq, opts ...client.CallOption) (*AllOrdersRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AllOrders", in)
	out := new(AllOrdersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AllAddress(ctx context.Context, in *AllAddressReq, opts ...client.CallOption) (*AllAddressRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AllAddress", in)
	out := new(AllAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AddFilm(ctx context.Context, in *AddFilmReq, opts ...client.CallOption) (*AddFilmRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AddFilm", in)
	out := new(AddFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...client.CallOption) (*AddAdminUserRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AddAdminUser", in)
	out := new(AddAdminUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AddAddress(ctx context.Context, in *AddAddressReq, opts ...client.CallOption) (*AddAddressRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AddAddress", in)
	out := new(AddAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...client.CallOption) (*UpdateAddressRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.UpdateAddress", in)
	out := new(UpdateAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...client.CallOption) (*DeleteAddressRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.DeleteAddress", in)
	out := new(DeleteAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, opts ...client.CallOption) (*DeleteAdminUserRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.DeleteAdminUser", in)
	out := new(DeleteAdminUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AllMovieHall(ctx context.Context, in *AllMovieHallReq, opts ...client.CallOption) (*AllMovieHallRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AllMovieHall", in)
	out := new(AllMovieHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AddMovieHall(ctx context.Context, in *AddMovieHallReq, opts ...client.CallOption) (*AddMovieHallRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AddMovieHall", in)
	out := new(AddMovieHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, opts ...client.CallOption) (*UpdateMovieHallRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.UpdateMovieHall", in)
	out := new(UpdateMovieHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, opts ...client.CallOption) (*DeleteMovieHallRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.DeleteMovieHall", in)
	out := new(DeleteMovieHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, opts ...client.CallOption) (*AllCinemaFilmsRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AllCinemaFilms", in)
	out := new(AllCinemaFilmsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, opts ...client.CallOption) (*AddCinemaFilmRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.AddCinemaFilm", in)
	out := new(AddCinemaFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, opts ...client.CallOption) (*UpdateCinemaFilmRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.UpdateCinemaFilm", in)
	out := new(UpdateCinemaFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtClient) DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, opts ...client.CallOption) (*DeleteCinemaFilmRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CMSServiceExt.DeleteCinemaFilm", in)
	out := new(DeleteCinemaFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CMSServiceExt service

type CMSServiceExtHandler interface {
	UserLogin(context.Context, *UserLoginReq, *UserLoginRsp) error
	UpdateMessage(context.Context, *UpdateMessageReq, *UpdateMessageRsp) error
	AllFilms(context.Context, *AllFilmsReq, *AllFilmsRsp) error
	UpdateFilm(context.Context, *UpdateFilmReq, *UpdateFilmRsp) error
	DeleteFilm(context.Context, *DeleteFilmReq, *DeleteFilmRsp) error
	AllUsers(context.Context, *AllUsersReq, *AllUsersRsp) error
	AllAdminUsers(context.Context, *AllAdminUsersReq, *AllAdminUsersRsp) error
	AllComments(context.Context, *AllCommentsReq, *AllCommentsRsp) error
	AllOrders(context.Context, *AllOrdersReq, *AllOrdersRsp) error
	AllAddress(context.Context, *AllAddressReq, *AllAddressRsp) error
	AddFilm(context.Context, *AddFilmReq, *AddFilmRsp) error
	AddAdminUser(context.Context, *AddAdminUserReq, *AddAdminUserRsp) error
	AddAddress(context.Context, *AddAddressReq, *AddAddressRsp) error
	UpdateAddress(context.Context, *UpdateAddressReq, *UpdateAddressRsp) error
	DeleteAddress(context.Context, *DeleteAddressReq, *DeleteAddressRsp) error
	DeleteAdminUser(context.Context, *DeleteAdminUserReq, *DeleteAdminUserRsp) error
	AllMovieHall(context.Context, *AllMovieHallReq, *AllMovieHallRsp) error
	AddMovieHall(context.Context, *AddMovieHallReq, *AddMovieHallRsp) error
	UpdateMovieHall(context.Context, *UpdateMovieHallReq, *UpdateMovieHallRsp) error
	DeleteMovieHall(context.Context, *DeleteMovieHallReq, *DeleteMovieHallRsp) error
	AllCinemaFilms(context.Context, *AllCinemaFilmsReq, *AllCinemaFilmsRsp) error
	AddCinemaFilm(context.Context, *AddCinemaFilmReq, *AddCinemaFilmRsp) error
	UpdateCinemaFilm(context.Context, *UpdateCinemaFilmReq, *UpdateCinemaFilmRsp) error
	DeleteCinemaFilm(context.Context, *DeleteCinemaFilmReq, *DeleteCinemaFilmRsp) error
}

func RegisterCMSServiceExtHandler(s server.Server, hdlr CMSServiceExtHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CMSServiceExt{hdlr}, opts...))
}

type CMSServiceExt struct {
	CMSServiceExtHandler
}

func (h *CMSServiceExt) UserLogin(ctx context.Context, in *UserLoginReq, out *UserLoginRsp) error {
	return h.CMSServiceExtHandler.UserLogin(ctx, in, out)
}

func (h *CMSServiceExt) UpdateMessage(ctx context.Context, in *UpdateMessageReq, out *UpdateMessageRsp) error {
	return h.CMSServiceExtHandler.UpdateMessage(ctx, in, out)
}

func (h *CMSServiceExt) AllFilms(ctx context.Context, in *AllFilmsReq, out *AllFilmsRsp) error {
	return h.CMSServiceExtHandler.AllFilms(ctx, in, out)
}

func (h *CMSServiceExt) UpdateFilm(ctx context.Context, in *UpdateFilmReq, out *UpdateFilmRsp) error {
	return h.CMSServiceExtHandler.UpdateFilm(ctx, in, out)
}

func (h *CMSServiceExt) DeleteFilm(ctx context.Context, in *DeleteFilmReq, out *DeleteFilmRsp) error {
	return h.CMSServiceExtHandler.DeleteFilm(ctx, in, out)
}

func (h *CMSServiceExt) AllUsers(ctx context.Context, in *AllUsersReq, out *AllUsersRsp) error {
	return h.CMSServiceExtHandler.AllUsers(ctx, in, out)
}

func (h *CMSServiceExt) AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, out *AllAdminUsersRsp) error {
	return h.CMSServiceExtHandler.AllAdminUsers(ctx, in, out)
}

func (h *CMSServiceExt) AllComments(ctx context.Context, in *AllCommentsReq, out *AllCommentsRsp) error {
	return h.CMSServiceExtHandler.AllComments(ctx, in, out)
}

func (h *CMSServiceExt) AllOrders(ctx context.Context, in *AllOrdersReq, out *AllOrdersRsp) error {
	return h.CMSServiceExtHandler.AllOrders(ctx, in, out)
}

func (h *CMSServiceExt) AllAddress(ctx context.Context, in *AllAddressReq, out *AllAddressRsp) error {
	return h.CMSServiceExtHandler.AllAddress(ctx, in, out)
}

func (h *CMSServiceExt) AddFilm(ctx context.Context, in *AddFilmReq, out *AddFilmRsp) error {
	return h.CMSServiceExtHandler.AddFilm(ctx, in, out)
}

func (h *CMSServiceExt) AddAdminUser(ctx context.Context, in *AddAdminUserReq, out *AddAdminUserRsp) error {
	return h.CMSServiceExtHandler.AddAdminUser(ctx, in, out)
}

func (h *CMSServiceExt) AddAddress(ctx context.Context, in *AddAddressReq, out *AddAddressRsp) error {
	return h.CMSServiceExtHandler.AddAddress(ctx, in, out)
}

func (h *CMSServiceExt) UpdateAddress(ctx context.Context, in *UpdateAddressReq, out *UpdateAddressRsp) error {
	return h.CMSServiceExtHandler.UpdateAddress(ctx, in, out)
}

func (h *CMSServiceExt) DeleteAddress(ctx context.Context, in *DeleteAddressReq, out *DeleteAddressRsp) error {
	return h.CMSServiceExtHandler.DeleteAddress(ctx, in, out)
}

func (h *CMSServiceExt) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, out *DeleteAdminUserRsp) error {
	return h.CMSServiceExtHandler.DeleteAdminUser(ctx, in, out)
}

func (h *CMSServiceExt) AllMovieHall(ctx context.Context, in *AllMovieHallReq, out *AllMovieHallRsp) error {
	return h.CMSServiceExtHandler.AllMovieHall(ctx, in, out)
}

func (h *CMSServiceExt) AddMovieHall(ctx context.Context, in *AddMovieHallReq, out *AddMovieHallRsp) error {
	return h.CMSServiceExtHandler.AddMovieHall(ctx, in, out)
}

func (h *CMSServiceExt) UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, out *UpdateMovieHallRsp) error {
	return h.CMSServiceExtHandler.UpdateMovieHall(ctx, in, out)
}

func (h *CMSServiceExt) DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, out *DeleteMovieHallRsp) error {
	return h.CMSServiceExtHandler.DeleteMovieHall(ctx, in, out)
}

func (h *CMSServiceExt) AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, out *AllCinemaFilmsRsp) error {
	return h.CMSServiceExtHandler.AllCinemaFilms(ctx, in, out)
}

func (h *CMSServiceExt) AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, out *AddCinemaFilmRsp) error {
	return h.CMSServiceExtHandler.AddCinemaFilm(ctx, in, out)
}

func (h *CMSServiceExt) UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, out *UpdateCinemaFilmRsp) error {
	return h.CMSServiceExtHandler.UpdateCinemaFilm(ctx, in, out)
}

func (h *CMSServiceExt) DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, out *DeleteCinemaFilmRsp) error {
	return h.CMSServiceExtHandler.DeleteCinemaFilm(ctx, in, out)
}

func init() { proto.RegisterFile("cms.ext.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4f, 0x73, 0x23, 0x47,
	0x15, 0x47, 0x96, 0xff, 0xc8, 0x2d, 0xc9, 0x92, 0x7b, 0xbd, 0x9b, 0x61, 0x08, 0x8b, 0x19, 0x52,
	0xb0, 0x05, 0x85, 0x8b, 0xec, 0x52, 0x45, 0x15, 0x24, 0x21, 0x13, 0x6b, 0x5d, 0x2b, 0x88, 0x9d,
	0x2d, 0x29, 0x21, 0xd9, 0xe2, 0x34, 0x3b, 0xd3, 0xb6, 0x86, 0xcc, 0x9f, 0xde, 0xe9, 0x51, 0xbc,
	0x3e, 0x70, 0xe1, 0x90, 0x4f, 0x10, 0xae, 0x5c, 0xb8, 0x70, 0xe5, 0x7b, 0x70, 0xe1, 0x40, 0xc1,
	0xb7, 0xe0, 0x2b, 0x50, 0xef, 0x75, 0xf7, 0x4c, 0xf7, 0x68, 0xb4, 0x09, 0x4e, 0x6a, 0x53, 0x95,
	0xf2, 0xad, 0xdf, 0xaf, 0x5f, 0x3f, 0xbd, 0x7e, 0xff, 0xfa, 0xf5, 0xb4, 0xc8, 0x30, 0x4c, 0xc5,
	0x11, 0x7b, 0x5e, 0x1e, 0xf1, 0x22, 0x2f, 0x73, 0xba, 0xc1, 0x9f, 0x7a, 0x6f, 0x91, 0xc1, 0x07,
	0x82, 0x15, 0xef, 0xe6, 0x17, 0x71, 0x36, 0x63, 0xcf, 0x28, 0x25, 0x9b, 0x4b, 0xc1, 0x0a, 0xa7,
	0x73, 0xd8, 0xb9, 0xb7, 0x3b, 0xc3, 0x31, 0x75, 0x49, 0x8f, 0x07, 0x42, 0x5c, 0xe6, 0x45, 0xe4,
	0x6c, 0x20, 0x5e, 0xd1, 0xde, 0x23, 0x73, 0xbd, 0xe0, 0xd4, 0x21, 0x3b, 0x41, 0x94, 0xc6, 0xd9,
	0x74, 0x82, 0xac, 0xdd, 0x99, 0x26, 0xe9, 0x5d, 0x42, 0xc2, 0x38, 0x63, 0x69, 0x70, 0x16, 0xa4,
	0xcc, 0xe9, 0xa2, 0x1c, 0x03, 0xf1, 0xce, 0xc8, 0xf8, 0x03, 0x1e, 0x05, 0x25, 0x3b, 0x65, 0x42,
	0x04, 0x17, 0x0c, 0xb4, 0x39, 0x20, 0x5b, 0x65, 0xf0, 0x34, 0x61, 0x4a, 0x1d, 0x49, 0x80, 0x8e,
	0x7f, 0x10, 0x79, 0xa6, 0x74, 0xc1, 0x31, 0x1d, 0x93, 0x6e, 0xb6, 0x4c, 0x95, 0x58, 0x18, 0x7a,
	0xb4, 0x29, 0x4f, 0x70, 0xef, 0x57, 0xa4, 0xef, 0x27, 0xc9, 0x49, 0x9c, 0xa4, 0x42, 0x6d, 0x96,
	0x07, 0x17, 0x52, 0x7a, 0x77, 0x86, 0xe3, 0xf5, 0x1b, 0xf0, 0x8e, 0x8d, 0xc5, 0x82, 0xa3, 0x6e,
	0x79, 0x19, 0x24, 0x6a, 0xb5, 0x24, 0xe8, 0x5d, 0xb2, 0x75, 0x0e, 0x1c, 0xce, 0xc6, 0x61, 0xf7,
	0x5e, 0xff, 0x7e, 0xef, 0x88, 0x3f, 0x3d, 0x82, 0x25, 0x33, 0x09, 0x7b, 0x9f, 0xf5, 0xc8, 0x26,
	0xd0, 0xf0, 0x3b, 0x69, 0xfe, 0x49, 0xcc, 0xa6, 0x13, 0x25, 0x40, 0x93, 0xb0, 0x95, 0x38, 0xbd,
	0x50, 0xbb, 0x83, 0x21, 0xbd, 0x43, 0xb6, 0x13, 0x96, 0x5d, 0x94, 0x0b, 0xdc, 0x5f, 0x77, 0xa6,
	0x28, 0xea, 0x91, 0x41, 0x2c, 0xe6, 0x2c, 0x61, 0x61, 0x39, 0x67, 0x41, 0xe9, 0x6c, 0xe2, 0xac,
	0x85, 0xd1, 0x57, 0xc9, 0x2e, 0xfc, 0xf2, 0xe3, 0x22, 0x0e, 0x99, 0xb3, 0x75, 0xd8, 0xb9, 0xb7,
	0x31, 0xab, 0x01, 0xfa, 0x63, 0x32, 0x06, 0x62, 0x1e, 0x16, 0x8c, 0x65, 0x97, 0x45, 0x5c, 0xb2,
	0xc2, 0xd9, 0xc6, 0x1f, 0x5e, 0xc1, 0xe1, 0xd7, 0x00, 0x9b, 0xc4, 0x05, 0x0b, 0xcb, 0xbc, 0x70,
	0x76, 0x90, 0xcf, 0xc2, 0xd0, 0xc9, 0x79, 0x9a, 0xb2, 0xac, 0x3c, 0x5b, 0xa6, 0x4e, 0x0f, 0xf5,
	0x31, 0x10, 0xd8, 0x75, 0x19, 0x97, 0x09, 0x3b, 0xce, 0x9c, 0x5d, 0x5c, 0xae, 0xc9, 0x6a, 0xe6,
	0x61, 0xe6, 0x10, 0x63, 0xe6, 0x61, 0x46, 0xef, 0x93, 0x83, 0x58, 0xcc, 0x97, 0x9c, 0xe7, 0x45,
	0x39, 0xcd, 0x92, 0x38, 0x63, 0x1f, 0x06, 0x65, 0xb8, 0x70, 0xfa, 0x28, 0xbd, 0x75, 0x0e, 0x42,
	0x36, 0x2c, 0x58, 0x50, 0x32, 0xbf, 0x74, 0x06, 0x32, 0x64, 0x35, 0x0d, 0x5e, 0x2f, 0xaf, 0x38,
	0x73, 0x86, 0x32, 0x7c, 0x60, 0xac, 0xad, 0x34, 0x29, 0x82, 0x34, 0x70, 0xf6, 0x70, 0xa2, 0x06,
	0xe8, 0x6b, 0x64, 0x08, 0x7b, 0xc8, 0xb3, 0x39, 0x67, 0x61, 0x1c, 0x24, 0xce, 0x08, 0x39, 0x6c,
	0x90, 0xde, 0x23, 0x23, 0x48, 0x17, 0x3f, 0x0c, 0x99, 0x10, 0xef, 0xc7, 0x29, 0x13, 0xce, 0x18,
	0x55, 0x6c, 0xc2, 0x20, 0x0f, 0x84, 0xbf, 0x93, 0x3f, 0xcf, 0xcf, 0xcf, 0xc1, 0x2f, 0xfb, 0xe8,
	0x17, 0x1b, 0xa4, 0x87, 0xa4, 0x7f, 0x19, 0x64, 0x25, 0x8b, 0x8e, 0xf3, 0x65, 0x56, 0x3a, 0x14,
	0x65, 0x99, 0x10, 0x78, 0x0f, 0x44, 0x1f, 0x4b, 0xfb, 0xca, 0x9f, 0xbc, 0x85, 0x6c, 0x2b, 0xb8,
	0xda, 0x03, 0x0f, 0xb2, 0xab, 0xa9, 0x10, 0x4b, 0x16, 0x39, 0x07, 0xd5, 0x1e, 0x6a, 0x10, 0xbc,
	0x10, 0x82, 0xe8, 0xe2, 0xca, 0xb9, 0x2d, 0xbd, 0xa0, 0x48, 0xd0, 0xa6, 0x08, 0xca, 0x38, 0xbb,
	0x38, 0x89, 0xb3, 0x20, 0x71, 0xee, 0xa0, 0xc6, 0x26, 0x04, 0x76, 0x8d, 0xc5, 0x83, 0x89, 0xf3,
	0x8a, 0xcc, 0x26, 0x18, 0x43, 0xe4, 0xc6, 0x62, 0x72, 0xea, 0x7f, 0xe4, 0x38, 0x32, 0x72, 0x25,
	0x05, 0xfe, 0x89, 0xc5, 0x49, 0x9c, 0x40, 0xbc, 0x7d, 0x1b, 0x67, 0x2a, 0x1a, 0x12, 0x2b, 0x16,
	0x8f, 0xf2, 0xd2, 0x71, 0x65, 0x62, 0x21, 0x21, 0x25, 0x4d, 0x41, 0xd2, 0x77, 0xb4, 0xa4, 0x69,
	0x25, 0x09, 0x46, 0x0f, 0x26, 0xce, 0xab, 0x5a, 0x92, 0xa4, 0xa5, 0xa4, 0x33, 0x76, 0xe9, 0x7c,
	0x57, 0x4b, 0x3a, 0x63, 0x97, 0xe0, 0xeb, 0x58, 0xbc, 0x1f, 0x87, 0x1f, 0xc7, 0xd9, 0x85, 0x73,
	0x17, 0x67, 0x6a, 0x00, 0x76, 0x51, 0x4c, 0x82, 0x2b, 0xe7, 0x7b, 0x72, 0x17, 0x30, 0x86, 0xdf,
	0x2e, 0x4e, 0xf3, 0xac, 0x5c, 0x38, 0x87, 0xf2, 0xb7, 0x25, 0x05, 0xf2, 0x8b, 0x27, 0x2c, 0x28,
	0x9c, 0xef, 0x4b, 0xf9, 0x48, 0x40, 0x0e, 0x04, 0x90, 0x0c, 0x50, 0xd5, 0x84, 0xe3, 0x1d, 0x76,
	0xa1, 0xd0, 0xd5, 0x08, 0xfe, 0xc2, 0x93, 0xd3, 0x89, 0xf3, 0x03, 0x19, 0x7f, 0x30, 0x56, 0x85,
	0x09, 0x2a, 0xe9, 0xb5, 0x0b, 0x93, 0x5c, 0x2c, 0x38, 0x94, 0x20, 0xf0, 0xbe, 0x70, 0x3a, 0x75,
	0x09, 0x82, 0xc9, 0x99, 0x84, 0xeb, 0xc2, 0xb5, 0x61, 0x14, 0x2e, 0xef, 0x2f, 0x1d, 0xb2, 0x09,
	0x5c, 0xb0, 0x59, 0xe0, 0x9b, 0x46, 0xea, 0xd7, 0x15, 0x05, 0x86, 0x86, 0x11, 0x56, 0x6f, 0x75,
	0x0a, 0x68, 0xda, 0x3a, 0x21, 0xba, 0xf6, 0x09, 0x61, 0xa5, 0xe2, 0x66, 0x23, 0x15, 0x0f, 0xc8,
	0x16, 0x4b, 0x83, 0x38, 0xc1, 0xc2, 0xb4, 0x3b, 0x93, 0x04, 0xa0, 0x7c, 0x91, 0x67, 0x4c, 0x55,
	0x22, 0x49, 0x78, 0x6f, 0x93, 0xb1, 0x9f, 0x24, 0x3e, 0xec, 0xf9, 0x9a, 0x76, 0xfa, 0xb0, 0x29,
	0x41, 0x70, 0xfa, 0x53, 0x42, 0x82, 0x0a, 0x50, 0x16, 0x1b, 0x82, 0xc5, 0x2a, 0xb6, 0x99, 0xc1,
	0xb0, 0xc6, 0x76, 0xff, 0xea, 0x90, 0xdd, 0x8a, 0x1f, 0x94, 0xf2, 0x97, 0x55, 0x59, 0xc7, 0x31,
	0xc4, 0x1c, 0x32, 0x18, 0xd6, 0xab, 0x01, 0xc8, 0x4d, 0x24, 0x1e, 0xdb, 0x36, 0xb4, 0xc1, 0x8a,
	0xeb, 0x18, 0xcf, 0xcc, 0xe9, 0x44, 0x95, 0x7b, 0x1b, 0xa4, 0x47, 0x84, 0x22, 0xf0, 0x6e, 0x20,
	0x4a, 0x3c, 0x95, 0x21, 0xfd, 0x95, 0x7d, 0x5b, 0x66, 0xc0, 0x3d, 0x52, 0x91, 0x65, 0x8a, 0xf6,
	0xee, 0xce, 0x2a, 0xda, 0x7b, 0x8b, 0xec, 0xf9, 0x49, 0xa2, 0xca, 0xc8, 0x35, 0x0c, 0xfe, 0x9e,
	0xbd, 0x5e, 0x70, 0xfa, 0x23, 0xd2, 0x53, 0xa7, 0x81, 0x36, 0x76, 0x1f, 0x8c, 0xad, 0x58, 0x66,
	0xd5, 0xe4, 0x1a, 0x43, 0xff, 0xbb, 0x43, 0x76, 0x14, 0x2f, 0x98, 0x54, 0x71, 0x57, 0xb6, 0xae,
	0x01, 0x88, 0x62, 0xa8, 0xa6, 0x95, 0x4e, 0x8a, 0x42, 0xb9, 0x70, 0xae, 0x28, 0x13, 0x4b, 0x42,
	0x96, 0xbd, 0xac, 0x64, 0x99, 0x0e, 0x51, 0x4d, 0xc2, 0xcc, 0x82, 0x05, 0xd1, 0x34, 0xbd, 0x50,
	0x36, 0xd4, 0x24, 0x18, 0x2e, 0x8b, 0xc3, 0x8f, 0xd1, 0xa3, 0x32, 0x50, 0x2b, 0xda, 0x8a, 0xf9,
	0x9d, 0xd5, 0x98, 0x5f, 0xf2, 0xfa, 0x74, 0x94, 0x84, 0xf7, 0x06, 0x19, 0xf8, 0x49, 0xf2, 0x5e,
	0x11, 0x5d, 0x2b, 0xb2, 0x7f, 0x63, 0xae, 0x16, 0x9c, 0xbe, 0x46, 0xb6, 0x73, 0x24, 0x94, 0x91,
	0x07, 0x60, 0x64, 0x9c, 0xf6, 0x93, 0x64, 0xa6, 0xe6, 0xd6, 0xd8, 0xf8, 0x4f, 0x5d, 0xd2, 0xd3,
	0xac, 0xf0, 0x93, 0xc8, 0x5c, 0x77, 0x29, 0x8a, 0x84, 0x2d, 0xe2, 0x10, 0x76, 0xa2, 0xca, 0x81,
	0xa6, 0xe1, 0xac, 0xc0, 0xf1, 0xbc, 0x0c, 0xca, 0xa5, 0x50, 0x4d, 0x8b, 0x09, 0x41, 0x8d, 0x44,
	0x52, 0xb6, 0x25, 0x9b, 0x78, 0x98, 0x18, 0x88, 0x65, 0xc0, 0xad, 0x55, 0x03, 0xf2, 0xe0, 0xca,
	0x2f, 0xab, 0xf2, 0x00, 0x04, 0x18, 0x2c, 0x5d, 0x4c, 0x27, 0x68, 0xee, 0xee, 0x0c, 0xc7, 0x10,
	0x04, 0x28, 0xf3, 0x23, 0x65, 0x6b, 0x45, 0x55, 0xf8, 0x13, 0x6c, 0x42, 0x34, 0xfe, 0xa4, 0x2a,
	0x7d, 0x13, 0x6c, 0x41, 0x74, 0xe9, 0x9b, 0x98, 0xbd, 0x5a, 0xdf, 0xee, 0xd5, 0xf4, 0x3e, 0xe6,
	0x61, 0x5e, 0x30, 0xec, 0x34, 0xba, 0x33, 0x03, 0x81, 0x20, 0x15, 0x65, 0x50, 0xe0, 0x19, 0xac,
	0x1a, 0x8e, 0x1a, 0x00, 0xb9, 0x2c, 0x8b, 0x70, 0x4e, 0xf6, 0x1c, 0x9a, 0xf4, 0xde, 0x24, 0x43,
	0x2c, 0x55, 0x51, 0xc1, 0xc4, 0x35, 0xe2, 0xe1, 0xb7, 0xd6, 0x72, 0x19, 0x10, 0x3c, 0x09, 0x42,
	0x66, 0x05, 0xc4, 0x63, 0x40, 0x30, 0x20, 0xe4, 0xdc, 0x9a, 0x80, 0xf8, 0xb4, 0x43, 0x7a, 0x9a,
	0x95, 0xee, 0x91, 0x8d, 0x58, 0x9f, 0x0c, 0x1b, 0x71, 0x04, 0x4b, 0xb0, 0x43, 0xd0, 0x4b, 0x90,
	0x00, 0x6d, 0xb3, 0xba, 0xcb, 0xc7, 0x31, 0x98, 0x8a, 0xc7, 0xd9, 0x55, 0x9c, 0x9d, 0x2c, 0x93,
	0x44, 0xa5, 0x99, 0x81, 0x40, 0xd0, 0x48, 0x6a, 0xbe, 0xc8, 0x0b, 0xed, 0x75, 0x13, 0xf2, 0x3e,
	0xed, 0x11, 0xe2, 0x47, 0x11, 0xb6, 0xd3, 0xec, 0x99, 0xb9, 0xfd, 0x8e, 0x7d, 0xd5, 0xb8, 0xe9,
	0xa0, 0x6f, 0x3a, 0xe8, 0x9b, 0x0e, 0xfa, 0x1b, 0xdb, 0x41, 0x7b, 0x83, 0xba, 0x0e, 0x08, 0xee,
	0xfd, 0xb3, 0x4b, 0x86, 0xf2, 0xa6, 0x6f, 0x54, 0x86, 0x2f, 0x7d, 0xb7, 0xb6, 0xb2, 0x7e, 0xb3,
	0x99, 0xf5, 0xcd, 0x4c, 0xde, 0x6a, 0xc9, 0x64, 0x23, 0x53, 0xb7, 0xd7, 0x66, 0xea, 0x8e, 0x9d,
	0xa9, 0x3a, 0xb3, 0x7a, 0xeb, 0x32, 0x6b, 0xf7, 0x73, 0x33, 0x8b, 0xb4, 0x65, 0xd6, 0x4a, 0xec,
	0xf6, 0x3f, 0x27, 0x76, 0x07, 0x76, 0xec, 0x6a, 0x9f, 0x0e, 0x5b, 0x7d, 0xba, 0xd7, 0xee, 0xd3,
	0x91, 0xe9, 0x53, 0x7d, 0xeb, 0x19, 0xd7, 0xb7, 0x1e, 0xb3, 0x82, 0xef, 0xdb, 0x07, 0xd8, 0xc8,
	0x72, 0xa9, 0xe0, 0xde, 0x31, 0x19, 0x4e, 0x58, 0xc2, 0xbe, 0x88, 0x8f, 0xd7, 0x1f, 0x8b, 0x23,
	0x4b, 0x88, 0xe0, 0xde, 0xdf, 0x3b, 0x64, 0xe4, 0x47, 0x51, 0xdd, 0xeb, 0xbf, 0xf0, 0x58, 0x79,
	0x79, 0x4d, 0xfc, 0x8b, 0x9a, 0xf2, 0xfd, 0x86, 0xca, 0x82, 0x7b, 0x7f, 0xee, 0x80, 0xd4, 0xc8,
	0x68, 0x17, 0xd6, 0x6f, 0xe2, 0x65, 0x1e, 0xd8, 0x23, 0x4b, 0x2d, 0xc1, 0xbd, 0xbf, 0x75, 0xf4,
	0x47, 0x39, 0x43, 0xd7, 0xaf, 0xb1, 0xa5, 0x30, 0xed, 0xb4, 0x6d, 0xc7, 0x0a, 0x6d, 0x6a, 0x2a,
	0xb8, 0xf7, 0x06, 0x19, 0xcb, 0xf8, 0x79, 0x81, 0xf6, 0xeb, 0xa3, 0x8f, 0x36, 0x57, 0x0b, 0xee,
	0xbd, 0x43, 0xa8, 0xc6, 0x8c, 0x10, 0x6c, 0xbb, 0x41, 0xae, 0x97, 0x7b, 0xb0, 0x2a, 0x43, 0x70,
	0xef, 0xd7, 0x64, 0xe4, 0x27, 0xc9, 0x29, 0xe4, 0xc4, 0xa3, 0x20, 0x49, 0xfe, 0xff, 0x1e, 0xf2,
	0x19, 0xd9, 0xad, 0x56, 0xab, 0xee, 0x5a, 0xef, 0x13, 0xc7, 0x90, 0xff, 0xe9, 0xc2, 0xc8, 0x05,
	0x45, 0x41, 0x9a, 0xa4, 0x0b, 0xb5, 0x47, 0xe5, 0xae, 0x1a, 0xc0, 0xbe, 0x42, 0x86, 0x79, 0xa4,
	0x62, 0xbf, 0xa2, 0xbd, 0xdf, 0x35, 0x74, 0x96, 0xf7, 0xf3, 0x54, 0xd3, 0xd6, 0xfd, 0xbc, 0xe6,
	0x32, 0x18, 0xd6, 0x74, 0xb0, 0x7f, 0xc4, 0x94, 0xb1, 0x6c, 0xb1, 0x3e, 0x41, 0xbe, 0xfa, 0x6d,
	0xed, 0x37, 0x7e, 0x5e, 0x70, 0xef, 0xb3, 0x0e, 0xa1, 0xea, 0xeb, 0xf4, 0xd7, 0xa4, 0x55, 0xe5,
	0xd2, 0xad, 0xda, 0xa5, 0x10, 0x4a, 0x4d, 0xad, 0xcc, 0x20, 0xfd, 0x82, 0xba, 0x6a, 0xc9, 0x1b,
	0xb6, 0xe4, 0xa6, 0x0c, 0xc1, 0x3d, 0x9f, 0xec, 0xfb, 0x49, 0x22, 0xcb, 0xde, 0x35, 0xbf, 0xca,
	0xff, 0xa3, 0x4b, 0x48, 0x2d, 0xc0, 0xd8, 0xb1, 0x56, 0xab, 0xa2, 0xd7, 0x7e, 0x13, 0xb8, 0x43,
	0xb6, 0x17, 0x41, 0x92, 0x4c, 0x27, 0xba, 0x05, 0x90, 0x14, 0xc8, 0x02, 0x0e, 0xb4, 0xba, 0xfa,
	0x72, 0xa5, 0xe9, 0xc6, 0x6b, 0xc6, 0x56, 0xf3, 0x35, 0x03, 0x5a, 0xd9, 0x82, 0x25, 0x2c, 0x10,
	0x0c, 0x9a, 0x47, 0x3c, 0x0e, 0x65, 0x81, 0x69, 0xc2, 0xd0, 0x82, 0x1a, 0x90, 0x3c, 0x50, 0xe5,
	0x25, 0x76, 0x05, 0xa7, 0x3f, 0x24, 0x7b, 0x06, 0x06, 0x07, 0xb2, 0xbc, 0x20, 0x34, 0x50, 0x6c,
	0x35, 0x6b, 0x44, 0x35, 0x0d, 0x26, 0x64, 0x72, 0x40, 0xbf, 0x41, 0x6c, 0x0e, 0x68, 0x3b, 0xee,
	0x12, 0xa2, 0x48, 0x3f, 0xd2, 0xfd, 0x82, 0x81, 0x80, 0x9b, 0xc2, 0xf3, 0xe9, 0x44, 0x5d, 0x7a,
	0x71, 0x6c, 0x34, 0x53, 0x43, 0xab, 0x99, 0xaa, 0xad, 0x31, 0x89, 0x85, 0x2c, 0xee, 0x7b, 0xd8,
	0x52, 0x35, 0x61, 0xef, 0xf7, 0x2b, 0x11, 0x21, 0x38, 0xfd, 0x19, 0xe9, 0x87, 0x35, 0xa2, 0xaa,
	0xc0, 0x1e, 0x7e, 0x38, 0xaa, 0xe0, 0x99, 0xc9, 0xb2, 0xa6, 0x0e, 0xfc, 0xa7, 0x4b, 0xc6, 0x7e,
	0x14, 0x19, 0x8b, 0xd8, 0xb3, 0x9b, 0x88, 0x79, 0x69, 0x11, 0x63, 0x24, 0xf1, 0x60, 0xa5, 0xba,
	0x7d, 0xc9, 0xb8, 0xa1, 0x4d, 0xcf, 0x0a, 0xee, 0xfd, 0xb7, 0x4b, 0x6e, 0xc9, 0x72, 0x76, 0xe3,
	0xf1, 0x6f, 0x9c, 0xc7, 0xab, 0xfa, 0x33, 0xaa, 0xeb, 0x8f, 0x77, 0xbb, 0xc5, 0xe1, 0x78, 0x79,
	0xb8, 0x25, 0x0f, 0x1f, 0x3b, 0x0e, 0x5e, 0x78, 0x82, 0x85, 0xe7, 0xf5, 0x09, 0x06, 0x63, 0x90,
	0xbd, 0x22, 0x44, 0xf0, 0xfb, 0x7f, 0xed, 0x93, 0xe1, 0xf1, 0xe9, 0x7c, 0xce, 0x8a, 0x4f, 0xe2,
	0x90, 0x3d, 0x7c, 0x5e, 0xd2, 0xd7, 0xc9, 0x6e, 0xf5, 0x24, 0x4e, 0xc7, 0xfa, 0xf5, 0x45, 0xbf,
	0xb0, 0xbb, 0x0d, 0x44, 0x70, 0xef, 0x5b, 0xf4, 0x4d, 0x7d, 0xdd, 0x51, 0x6f, 0xd5, 0xf4, 0x00,
	0x99, 0x1a, 0xcf, 0xe1, 0x6e, 0x0b, 0x8a, 0xcb, 0x8f, 0x48, 0x4f, 0xbf, 0x4c, 0xd3, 0x11, 0x3e,
	0x5e, 0xd4, 0x8f, 0xdc, 0xae, 0x0d, 0x20, 0xff, 0xcf, 0x09, 0xa9, 0x6f, 0x57, 0x74, 0xbf, 0x96,
	0xaa, 0x2c, 0xe3, 0x36, 0x21, 0xbd, 0xaa, 0xbe, 0x3d, 0xc9, 0x55, 0xd6, 0x95, 0xcc, 0x6d, 0x42,
	0x86, 0x6e, 0xf2, 0xf5, 0x44, 0xab, 0xa2, 0xdf, 0x6f, 0x5c, 0x1b, 0xd0, 0xa6, 0xb0, 0x1e, 0x69,
	0xa4, 0x29, 0x9a, 0x2f, 0x3f, 0x6e, 0x0b, 0x8a, 0xcb, 0x7f, 0x81, 0x6f, 0x61, 0xfa, 0xc9, 0x81,
	0x52, 0xc5, 0x66, 0xbc, 0x61, 0xb8, 0x2b, 0x18, 0x2e, 0x7c, 0x9d, 0xec, 0x56, 0x9f, 0xd0, 0xa5,
	0xd7, 0xcc, 0xef, 0xf1, 0x6e, 0x03, 0xd1, 0x06, 0xa9, 0xbf, 0xb2, 0x4a, 0x83, 0x58, 0x1f, 0x6d,
	0xdd, 0x26, 0x84, 0xab, 0x7e, 0x42, 0x76, 0xd4, 0xc7, 0x0b, 0xba, 0x27, 0x1f, 0x9a, 0xf4, 0x17,
	0x4d, 0xd7, 0xa2, 0x91, 0xf9, 0x97, 0x64, 0x60, 0x5e, 0xf6, 0xe8, 0x2d, 0xc5, 0x61, 0x5e, 0x17,
	0xdc, 0x55, 0xb0, 0x52, 0xaf, 0xba, 0x7d, 0x29, 0xf5, 0xcc, 0x4b, 0xa2, 0xdb, 0x84, 0xec, 0x50,
	0xd4, 0x0b, 0x8d, 0xa0, 0x33, 0xd6, 0xb6, 0xa0, 0x7a, 0xb9, 0x75, 0xc9, 0x91, 0xcb, 0x9b, 0xb7,
	0x26, 0xb7, 0x05, 0xc5, 0xe5, 0xc7, 0x64, 0xd4, 0xb8, 0xcb, 0xd0, 0x3b, 0x26, 0xab, 0xb1, 0xeb,
	0x56, 0xbc, 0x32, 0x9a, 0x71, 0x8d, 0x50, 0x46, 0xb3, 0x2f, 0x43, 0xee, 0x2a, 0x68, 0x18, 0xbc,
	0xb9, 0xd6, 0xbe, 0x3c, 0xb8, 0xab, 0xa0, 0x56, 0xbe, 0xd1, 0x3d, 0x4b, 0xe5, 0x57, 0x1b, 0x7d,
	0xb7, 0x15, 0xb7, 0x2d, 0xd0, 0x10, 0xb2, 0xda, 0x81, 0xbb, 0xad, 0x38, 0x0a, 0x79, 0x5b, 0x3e,
	0xbc, 0x19, 0x0d, 0xd1, 0x6d, 0x1d, 0xf4, 0x56, 0xaf, 0xed, 0xb6, 0xc1, 0x55, 0x1a, 0x9a, 0xe7,
	0xa9, 0x4a, 0xc3, 0x46, 0xf3, 0xe4, 0xb6, 0xa0, 0xb8, 0xfc, 0x44, 0xdf, 0x9e, 0x0d, 0x09, 0xaf,
	0xd4, 0x7b, 0xb6, 0x85, 0xb4, 0x4f, 0x68, 0x39, 0xcd, 0xa2, 0x2b, 0xe5, 0xb4, 0xd4, 0x73, 0xb7,
	0x7d, 0x02, 0xe4, 0x3c, 0xdd, 0xc6, 0x7f, 0x3c, 0x3d, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x72, 0xf4, 0xae, 0xba, 0x02, 0x25, 0x00, 0x00,
}
